{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "906f3dec-6605-4505-b75e-20edaa32c73d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import warnings\n",
    "import numpy as np\n",
    "from sklearn.compose import ColumnTransformer , make_column_selector\n",
    "from numpy import datetime64 , float64,int64\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "from numpy import array\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a2f866aa-b2bc-4efe-b49a-97b22fcfaf84",
   "metadata": {},
   "outputs": [],
   "source": [
    "warnings.filterwarnings('ignore')\n",
    "# Loading datasets\n",
    "players_22 = pd.read_csv(\"C:\\\\Users\\\\user\\\\Downloads\\\\players_22-1.csv\")\n",
    "legacy = pd.read_csv(\"C:\\\\Users\\\\user\\\\Downloads\\\\male_players (legacy).csv\")#legacy dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ed116622-6361-467d-bd02-1be8bfdc8b8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sofifa_id</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>age</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>club_team_id</th>\n",
       "      <th>league_level</th>\n",
       "      <th>...</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>defending_marking_awareness</th>\n",
       "      <th>defending_standing_tackle</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>goalkeeping_diving</th>\n",
       "      <th>goalkeeping_handling</th>\n",
       "      <th>goalkeeping_kicking</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>goalkeeping_reflexes</th>\n",
       "      <th>goalkeeping_speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>1.916500e+04</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>19239.000000</td>\n",
       "      <td>2132.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>231468.086959</td>\n",
       "      <td>65.772182</td>\n",
       "      <td>71.079370</td>\n",
       "      <td>2.850452e+06</td>\n",
       "      <td>9017.989363</td>\n",
       "      <td>25.210822</td>\n",
       "      <td>181.299704</td>\n",
       "      <td>74.943032</td>\n",
       "      <td>50580.498123</td>\n",
       "      <td>1.354364</td>\n",
       "      <td>...</td>\n",
       "      <td>57.929830</td>\n",
       "      <td>46.601746</td>\n",
       "      <td>48.045584</td>\n",
       "      <td>45.906700</td>\n",
       "      <td>16.406102</td>\n",
       "      <td>16.192474</td>\n",
       "      <td>16.055356</td>\n",
       "      <td>16.229274</td>\n",
       "      <td>16.491814</td>\n",
       "      <td>36.439962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>27039.717497</td>\n",
       "      <td>6.880232</td>\n",
       "      <td>6.086213</td>\n",
       "      <td>7.613700e+06</td>\n",
       "      <td>19470.176724</td>\n",
       "      <td>4.748235</td>\n",
       "      <td>6.863179</td>\n",
       "      <td>7.069434</td>\n",
       "      <td>54401.868535</td>\n",
       "      <td>0.747865</td>\n",
       "      <td>...</td>\n",
       "      <td>12.159326</td>\n",
       "      <td>20.200807</td>\n",
       "      <td>21.232718</td>\n",
       "      <td>20.755683</td>\n",
       "      <td>17.574028</td>\n",
       "      <td>16.839528</td>\n",
       "      <td>16.564554</td>\n",
       "      <td>17.059779</td>\n",
       "      <td>17.884833</td>\n",
       "      <td>10.751563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>9.000000e+03</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>214413.500000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>4.750000e+05</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>176.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>479.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>27.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>236543.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>9.750000e+05</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>181.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>1938.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>36.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>253532.500000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>2.000000e+06</td>\n",
       "      <td>8000.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>186.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>111139.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>264640.000000</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>1.940000e+08</td>\n",
       "      <td>350000.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>206.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>115820.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>65.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           sofifa_id       overall     potential     value_eur       wage_eur  \\\n",
       "count   19239.000000  19239.000000  19239.000000  1.916500e+04   19178.000000   \n",
       "mean   231468.086959     65.772182     71.079370  2.850452e+06    9017.989363   \n",
       "std     27039.717497      6.880232      6.086213  7.613700e+06   19470.176724   \n",
       "min        41.000000     47.000000     49.000000  9.000000e+03     500.000000   \n",
       "25%    214413.500000     61.000000     67.000000  4.750000e+05    1000.000000   \n",
       "50%    236543.000000     66.000000     71.000000  9.750000e+05    3000.000000   \n",
       "75%    253532.500000     70.000000     75.000000  2.000000e+06    8000.000000   \n",
       "max    264640.000000     93.000000     95.000000  1.940000e+08  350000.000000   \n",
       "\n",
       "                age     height_cm     weight_kg   club_team_id  league_level  \\\n",
       "count  19239.000000  19239.000000  19239.000000   19178.000000  19178.000000   \n",
       "mean      25.210822    181.299704     74.943032   50580.498123      1.354364   \n",
       "std        4.748235      6.863179      7.069434   54401.868535      0.747865   \n",
       "min       16.000000    155.000000     49.000000       1.000000      1.000000   \n",
       "25%       21.000000    176.000000     70.000000     479.000000      1.000000   \n",
       "50%       25.000000    181.000000     75.000000    1938.000000      1.000000   \n",
       "75%       29.000000    186.000000     80.000000  111139.000000      1.000000   \n",
       "max       54.000000    206.000000    110.000000  115820.000000      5.000000   \n",
       "\n",
       "       ...  mentality_composure  defending_marking_awareness  \\\n",
       "count  ...         19239.000000                 19239.000000   \n",
       "mean   ...            57.929830                    46.601746   \n",
       "std    ...            12.159326                    20.200807   \n",
       "min    ...            12.000000                     4.000000   \n",
       "25%    ...            50.000000                    29.000000   \n",
       "50%    ...            59.000000                    52.000000   \n",
       "75%    ...            66.000000                    63.000000   \n",
       "max    ...            96.000000                    93.000000   \n",
       "\n",
       "       defending_standing_tackle  defending_sliding_tackle  \\\n",
       "count               19239.000000              19239.000000   \n",
       "mean                   48.045584                 45.906700   \n",
       "std                    21.232718                 20.755683   \n",
       "min                     5.000000                  5.000000   \n",
       "25%                    28.000000                 25.000000   \n",
       "50%                    56.000000                 53.000000   \n",
       "75%                    65.000000                 63.000000   \n",
       "max                    93.000000                 92.000000   \n",
       "\n",
       "       goalkeeping_diving  goalkeeping_handling  goalkeeping_kicking  \\\n",
       "count        19239.000000          19239.000000         19239.000000   \n",
       "mean            16.406102             16.192474            16.055356   \n",
       "std             17.574028             16.839528            16.564554   \n",
       "min              2.000000              2.000000             2.000000   \n",
       "25%              8.000000              8.000000             8.000000   \n",
       "50%             11.000000             11.000000            11.000000   \n",
       "75%             14.000000             14.000000            14.000000   \n",
       "max             91.000000             92.000000            93.000000   \n",
       "\n",
       "       goalkeeping_positioning  goalkeeping_reflexes  goalkeeping_speed  \n",
       "count             19239.000000          19239.000000        2132.000000  \n",
       "mean                 16.229274             16.491814          36.439962  \n",
       "std                  17.059779             17.884833          10.751563  \n",
       "min                   2.000000              2.000000          15.000000  \n",
       "25%                   8.000000              8.000000          27.000000  \n",
       "50%                  11.000000             11.000000          36.000000  \n",
       "75%                  14.000000             14.000000          45.000000  \n",
       "max                  92.000000             90.000000          65.000000  \n",
       "\n",
       "[8 rows x 60 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players_22.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "51bf2c04-e41b-4fab-ade0-27911f603e03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>age</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>...</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>defending_marking_awareness</th>\n",
       "      <th>defending_standing_tackle</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>goalkeeping_diving</th>\n",
       "      <th>goalkeeping_handling</th>\n",
       "      <th>goalkeeping_kicking</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>goalkeeping_reflexes</th>\n",
       "      <th>goalkeeping_speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.0</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>1.595300e+05</td>\n",
       "      <td>159822.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>128722.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.00000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>17969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>214484.722353</td>\n",
       "      <td>19.125514</td>\n",
       "      <td>2.0</td>\n",
       "      <td>65.699071</td>\n",
       "      <td>70.744008</td>\n",
       "      <td>2.326770e+06</td>\n",
       "      <td>10855.409768</td>\n",
       "      <td>25.123181</td>\n",
       "      <td>181.240205</td>\n",
       "      <td>75.235031</td>\n",
       "      <td>...</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>45.757957</td>\n",
       "      <td>47.669996</td>\n",
       "      <td>45.698588</td>\n",
       "      <td>16.52961</td>\n",
       "      <td>16.274918</td>\n",
       "      <td>16.140374</td>\n",
       "      <td>16.288861</td>\n",
       "      <td>16.636973</td>\n",
       "      <td>39.149090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>34928.608856</td>\n",
       "      <td>2.559318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.040855</td>\n",
       "      <td>6.259121</td>\n",
       "      <td>6.005746e+06</td>\n",
       "      <td>21941.656285</td>\n",
       "      <td>4.670207</td>\n",
       "      <td>6.750148</td>\n",
       "      <td>7.000456</td>\n",
       "      <td>...</td>\n",
       "      <td>12.329739</td>\n",
       "      <td>20.453699</td>\n",
       "      <td>21.336404</td>\n",
       "      <td>20.935273</td>\n",
       "      <td>17.67047</td>\n",
       "      <td>16.834294</td>\n",
       "      <td>16.476466</td>\n",
       "      <td>16.998697</td>\n",
       "      <td>17.980143</td>\n",
       "      <td>10.503788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>154.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>199159.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>3.250000e+05</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>176.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>8.00000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>220621.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>7.250000e+05</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>181.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>11.00000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>41.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>236958.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>1.800000e+06</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>186.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>14.00000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>46.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>271817.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>1.940000e+08</td>\n",
       "      <td>575000.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>91.00000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>68.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 63 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           player_id   fifa_version  fifa_update        overall  \\\n",
       "count  161583.000000  161583.000000     161583.0  161583.000000   \n",
       "mean   214484.722353      19.125514          2.0      65.699071   \n",
       "std     34928.608856       2.559318          0.0       7.040855   \n",
       "min         2.000000      15.000000          2.0      40.000000   \n",
       "25%    199159.000000      17.000000          2.0      61.000000   \n",
       "50%    220621.000000      19.000000          2.0      66.000000   \n",
       "75%    236958.000000      21.000000          2.0      70.000000   \n",
       "max    271817.000000      23.000000          2.0      94.000000   \n",
       "\n",
       "           potential     value_eur       wage_eur            age  \\\n",
       "count  161583.000000  1.595300e+05  159822.000000  161583.000000   \n",
       "mean       70.744008  2.326770e+06   10855.409768      25.123181   \n",
       "std         6.259121  6.005746e+06   21941.656285       4.670207   \n",
       "min        40.000000  1.000000e+03     500.000000      16.000000   \n",
       "25%        66.000000  3.250000e+05    2000.000000      21.000000   \n",
       "50%        70.000000  7.250000e+05    4000.000000      25.000000   \n",
       "75%        75.000000  1.800000e+06   10000.000000      28.000000   \n",
       "max        95.000000  1.940000e+08  575000.000000      54.000000   \n",
       "\n",
       "           height_cm      weight_kg  ...  mentality_composure  \\\n",
       "count  161583.000000  161583.000000  ...        128722.000000   \n",
       "mean      181.240205      75.235031  ...            57.816892   \n",
       "std         6.750148       7.000456  ...            12.329739   \n",
       "min       154.000000      49.000000  ...             3.000000   \n",
       "25%       176.000000      70.000000  ...            50.000000   \n",
       "50%       181.000000      75.000000  ...            59.000000   \n",
       "75%       186.000000      80.000000  ...            66.000000   \n",
       "max       208.000000     110.000000  ...            96.000000   \n",
       "\n",
       "       defending_marking_awareness  defending_standing_tackle  \\\n",
       "count                161583.000000              161583.000000   \n",
       "mean                     45.757957                  47.669996   \n",
       "std                      20.453699                  21.336404   \n",
       "min                       1.000000                   2.000000   \n",
       "25%                      26.000000                  27.000000   \n",
       "50%                      50.000000                  54.000000   \n",
       "75%                      63.000000                  66.000000   \n",
       "max                      94.000000                  94.000000   \n",
       "\n",
       "       defending_sliding_tackle  goalkeeping_diving  goalkeeping_handling  \\\n",
       "count             161583.000000        161583.00000         161583.000000   \n",
       "mean                  45.698588            16.52961             16.274918   \n",
       "std                   20.935273            17.67047             16.834294   \n",
       "min                    3.000000             1.00000              1.000000   \n",
       "25%                   25.000000             8.00000              8.000000   \n",
       "50%                   52.000000            11.00000             11.000000   \n",
       "75%                   64.000000            14.00000             14.000000   \n",
       "max                   95.000000            91.00000             92.000000   \n",
       "\n",
       "       goalkeeping_kicking  goalkeeping_positioning  goalkeeping_reflexes  \\\n",
       "count        161583.000000            161583.000000         161583.000000   \n",
       "mean             16.140374                16.288861             16.636973   \n",
       "std              16.476466                16.998697             17.980143   \n",
       "min               1.000000                 1.000000              1.000000   \n",
       "25%               8.000000                 8.000000              8.000000   \n",
       "50%              11.000000                11.000000             11.000000   \n",
       "75%              14.000000                14.000000             14.000000   \n",
       "max              95.000000                92.000000             94.000000   \n",
       "\n",
       "       goalkeeping_speed  \n",
       "count       17969.000000  \n",
       "mean           39.149090  \n",
       "std            10.503788  \n",
       "min            12.000000  \n",
       "25%            31.000000  \n",
       "50%            41.000000  \n",
       "75%            46.000000  \n",
       "max            68.000000  \n",
       "\n",
       "[8 rows x 63 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legacy.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b7d539f0-5281-4521-9b1c-10ca7657c709",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'age',\n",
       " 'attacking_crossing',\n",
       " 'attacking_finishing',\n",
       " 'attacking_heading_accuracy',\n",
       " 'attacking_short_passing',\n",
       " 'attacking_volleys',\n",
       " 'body_type',\n",
       " 'cam',\n",
       " 'cb',\n",
       " 'cdm',\n",
       " 'cf',\n",
       " 'club_contract_valid_until_year',\n",
       " 'club_jersey_number',\n",
       " 'club_joined_date',\n",
       " 'club_loaned_from',\n",
       " 'club_name',\n",
       " 'club_position',\n",
       " 'club_team_id',\n",
       " 'cm',\n",
       " 'defending',\n",
       " 'defending_marking_awareness',\n",
       " 'defending_sliding_tackle',\n",
       " 'defending_standing_tackle',\n",
       " 'dob',\n",
       " 'dribbling',\n",
       " 'fifa_update',\n",
       " 'fifa_update_date',\n",
       " 'fifa_version',\n",
       " 'gk',\n",
       " 'goalkeeping_diving',\n",
       " 'goalkeeping_handling',\n",
       " 'goalkeeping_kicking',\n",
       " 'goalkeeping_positioning',\n",
       " 'goalkeeping_reflexes',\n",
       " 'goalkeeping_speed',\n",
       " 'height_cm',\n",
       " 'international_reputation',\n",
       " 'lam',\n",
       " 'lb',\n",
       " 'lcb',\n",
       " 'lcm',\n",
       " 'ldm',\n",
       " 'league_id',\n",
       " 'league_level',\n",
       " 'league_name',\n",
       " 'lf',\n",
       " 'lm',\n",
       " 'long_name',\n",
       " 'ls',\n",
       " 'lw',\n",
       " 'lwb',\n",
       " 'mentality_aggression',\n",
       " 'mentality_composure',\n",
       " 'mentality_interceptions',\n",
       " 'mentality_penalties',\n",
       " 'mentality_positioning',\n",
       " 'mentality_vision',\n",
       " 'movement_acceleration',\n",
       " 'movement_agility',\n",
       " 'movement_balance',\n",
       " 'movement_reactions',\n",
       " 'movement_sprint_speed',\n",
       " 'nation_jersey_number',\n",
       " 'nation_position',\n",
       " 'nation_team_id',\n",
       " 'nationality_id',\n",
       " 'nationality_name',\n",
       " 'overall',\n",
       " 'pace',\n",
       " 'passing',\n",
       " 'physic',\n",
       " 'player_face_url',\n",
       " 'player_id',\n",
       " 'player_positions',\n",
       " 'player_tags',\n",
       " 'player_traits',\n",
       " 'player_url',\n",
       " 'potential',\n",
       " 'power_jumping',\n",
       " 'power_long_shots',\n",
       " 'power_shot_power',\n",
       " 'power_stamina',\n",
       " 'power_strength',\n",
       " 'preferred_foot',\n",
       " 'ram',\n",
       " 'rb',\n",
       " 'rcb',\n",
       " 'rcm',\n",
       " 'rdm',\n",
       " 'real_face',\n",
       " 'release_clause_eur',\n",
       " 'rf',\n",
       " 'rm',\n",
       " 'rs',\n",
       " 'rw',\n",
       " 'rwb',\n",
       " 'shooting',\n",
       " 'short_name',\n",
       " 'skill_ball_control',\n",
       " 'skill_curve',\n",
       " 'skill_dribbling',\n",
       " 'skill_fk_accuracy',\n",
       " 'skill_long_passing',\n",
       " 'skill_moves',\n",
       " 'st',\n",
       " 'value_eur',\n",
       " 'wage_eur',\n",
       " 'weak_foot',\n",
       " 'weight_kg',\n",
       " 'work_rate'}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legacy_columns = set(legacy.columns)\n",
    "legacy_columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "59c3f94a-c997-4314-aeac-2849ab65a8bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'age',\n",
       " 'attacking_crossing',\n",
       " 'attacking_finishing',\n",
       " 'attacking_heading_accuracy',\n",
       " 'attacking_short_passing',\n",
       " 'attacking_volleys',\n",
       " 'body_type',\n",
       " 'cam',\n",
       " 'cb',\n",
       " 'cdm',\n",
       " 'cf',\n",
       " 'club_contract_valid_until',\n",
       " 'club_flag_url',\n",
       " 'club_jersey_number',\n",
       " 'club_joined',\n",
       " 'club_loaned_from',\n",
       " 'club_logo_url',\n",
       " 'club_name',\n",
       " 'club_position',\n",
       " 'club_team_id',\n",
       " 'cm',\n",
       " 'defending',\n",
       " 'defending_marking_awareness',\n",
       " 'defending_sliding_tackle',\n",
       " 'defending_standing_tackle',\n",
       " 'dob',\n",
       " 'dribbling',\n",
       " 'gk',\n",
       " 'goalkeeping_diving',\n",
       " 'goalkeeping_handling',\n",
       " 'goalkeeping_kicking',\n",
       " 'goalkeeping_positioning',\n",
       " 'goalkeeping_reflexes',\n",
       " 'goalkeeping_speed',\n",
       " 'height_cm',\n",
       " 'international_reputation',\n",
       " 'lam',\n",
       " 'lb',\n",
       " 'lcb',\n",
       " 'lcm',\n",
       " 'ldm',\n",
       " 'league_level',\n",
       " 'league_name',\n",
       " 'lf',\n",
       " 'lm',\n",
       " 'long_name',\n",
       " 'ls',\n",
       " 'lw',\n",
       " 'lwb',\n",
       " 'mentality_aggression',\n",
       " 'mentality_composure',\n",
       " 'mentality_interceptions',\n",
       " 'mentality_penalties',\n",
       " 'mentality_positioning',\n",
       " 'mentality_vision',\n",
       " 'movement_acceleration',\n",
       " 'movement_agility',\n",
       " 'movement_balance',\n",
       " 'movement_reactions',\n",
       " 'movement_sprint_speed',\n",
       " 'nation_flag_url',\n",
       " 'nation_jersey_number',\n",
       " 'nation_logo_url',\n",
       " 'nation_position',\n",
       " 'nation_team_id',\n",
       " 'nationality_id',\n",
       " 'nationality_name',\n",
       " 'overall',\n",
       " 'pace',\n",
       " 'passing',\n",
       " 'physic',\n",
       " 'player_face_url',\n",
       " 'player_positions',\n",
       " 'player_tags',\n",
       " 'player_traits',\n",
       " 'player_url',\n",
       " 'potential',\n",
       " 'power_jumping',\n",
       " 'power_long_shots',\n",
       " 'power_shot_power',\n",
       " 'power_stamina',\n",
       " 'power_strength',\n",
       " 'preferred_foot',\n",
       " 'ram',\n",
       " 'rb',\n",
       " 'rcb',\n",
       " 'rcm',\n",
       " 'rdm',\n",
       " 'real_face',\n",
       " 'release_clause_eur',\n",
       " 'rf',\n",
       " 'rm',\n",
       " 'rs',\n",
       " 'rw',\n",
       " 'rwb',\n",
       " 'shooting',\n",
       " 'short_name',\n",
       " 'skill_ball_control',\n",
       " 'skill_curve',\n",
       " 'skill_dribbling',\n",
       " 'skill_fk_accuracy',\n",
       " 'skill_long_passing',\n",
       " 'skill_moves',\n",
       " 'sofifa_id',\n",
       " 'st',\n",
       " 'value_eur',\n",
       " 'wage_eur',\n",
       " 'weak_foot',\n",
       " 'weight_kg',\n",
       " 'work_rate'}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players_22_columns = set(players_22.columns)\n",
    "players_22_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "83843d96-f470-4383-842e-73380df18f7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['nationality_name',\n",
       " 'power_long_shots',\n",
       " 'lw',\n",
       " 'movement_agility',\n",
       " 'ram',\n",
       " 'goalkeeping_positioning',\n",
       " 'mentality_composure',\n",
       " 'weight_kg',\n",
       " 'defending_sliding_tackle',\n",
       " 'nation_position',\n",
       " 'skill_ball_control',\n",
       " 'defending_standing_tackle',\n",
       " 'short_name',\n",
       " 'passing',\n",
       " 'rcb',\n",
       " 'league_level',\n",
       " 'movement_acceleration',\n",
       " 'mentality_aggression',\n",
       " 'rw',\n",
       " 'lcb',\n",
       " 'rs',\n",
       " 'body_type',\n",
       " 'rf',\n",
       " 'attacking_volleys',\n",
       " 'power_strength',\n",
       " 'mentality_interceptions',\n",
       " 'preferred_foot',\n",
       " 'power_shot_power',\n",
       " 'nationality_id',\n",
       " 'lb',\n",
       " 'mentality_positioning',\n",
       " 'goalkeeping_diving',\n",
       " 'lcm',\n",
       " 'overall',\n",
       " 'league_name',\n",
       " 'attacking_short_passing',\n",
       " 'rb',\n",
       " 'goalkeeping_kicking',\n",
       " 'skill_curve',\n",
       " 'release_clause_eur',\n",
       " 'defending',\n",
       " 'st',\n",
       " 'goalkeeping_handling',\n",
       " 'goalkeeping_speed',\n",
       " 'rwb',\n",
       " 'international_reputation',\n",
       " 'power_jumping',\n",
       " 'pace',\n",
       " 'ldm',\n",
       " 'player_tags',\n",
       " 'weak_foot',\n",
       " 'lam',\n",
       " 'rcm',\n",
       " 'movement_reactions',\n",
       " 'club_name',\n",
       " 'shooting',\n",
       " 'cf',\n",
       " 'movement_sprint_speed',\n",
       " 'cdm',\n",
       " 'player_positions',\n",
       " 'value_eur',\n",
       " 'physic',\n",
       " 'club_position',\n",
       " 'rm',\n",
       " 'player_traits',\n",
       " 'skill_fk_accuracy',\n",
       " 'attacking_heading_accuracy',\n",
       " 'movement_balance',\n",
       " 'real_face',\n",
       " 'cb',\n",
       " 'attacking_crossing',\n",
       " 'defending_marking_awareness',\n",
       " 'ls',\n",
       " 'skill_long_passing',\n",
       " 'power_stamina',\n",
       " 'player_face_url',\n",
       " 'skill_moves',\n",
       " 'club_jersey_number',\n",
       " 'mentality_penalties',\n",
       " 'cam',\n",
       " 'wage_eur',\n",
       " 'club_loaned_from',\n",
       " 'rdm',\n",
       " 'skill_dribbling',\n",
       " 'mentality_vision',\n",
       " 'goalkeeping_reflexes',\n",
       " 'lwb',\n",
       " 'lf',\n",
       " 'club_team_id',\n",
       " 'lm',\n",
       " 'player_url',\n",
       " 'dribbling',\n",
       " 'attacking_finishing',\n",
       " 'age',\n",
       " 'cm',\n",
       " 'gk',\n",
       " 'nation_jersey_number',\n",
       " 'height_cm',\n",
       " 'potential',\n",
       " 'nation_team_id',\n",
       " 'dob',\n",
       " 'long_name',\n",
       " 'work_rate']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_columns = legacy_columns .intersection(players_22_columns)\n",
    "common_columns=list(common_columns)\n",
    "common_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "42bdd39d-e462-4dd4-b0e5-a5766abc0ee3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'club_contract_valid_until_year',\n",
       " 'club_joined_date',\n",
       " 'fifa_update',\n",
       " 'fifa_update_date',\n",
       " 'fifa_version',\n",
       " 'league_id',\n",
       " 'player_id'}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_only_in_legacy= legacy_columns - players_22_columns\n",
    "columns_only_in_legacy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "302cec69-c4d9-4e5b-bc53-ef3ae48f14b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'club_contract_valid_until',\n",
       " 'club_flag_url',\n",
       " 'club_joined',\n",
       " 'club_logo_url',\n",
       " 'nation_flag_url',\n",
       " 'nation_logo_url',\n",
       " 'sofifa_id'}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_only_in_players_22 = players_22_columns - legacy_columns\n",
    "columns_only_in_players_22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ab518cf8-0a75-4b17-99c0-89b291ac968a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nationality_name</th>\n",
       "      <th>power_long_shots</th>\n",
       "      <th>lw</th>\n",
       "      <th>movement_agility</th>\n",
       "      <th>ram</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>nation_position</th>\n",
       "      <th>...</th>\n",
       "      <th>age</th>\n",
       "      <th>cm</th>\n",
       "      <th>gk</th>\n",
       "      <th>nation_jersey_number</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>potential</th>\n",
       "      <th>nation_team_id</th>\n",
       "      <th>dob</th>\n",
       "      <th>long_name</th>\n",
       "      <th>work_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>88</td>\n",
       "      <td>92+3</td>\n",
       "      <td>94</td>\n",
       "      <td>92+3</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67</td>\n",
       "      <td>20</td>\n",
       "      <td>CF</td>\n",
       "      <td>...</td>\n",
       "      <td>27</td>\n",
       "      <td>79+3</td>\n",
       "      <td>15+3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>169</td>\n",
       "      <td>95</td>\n",
       "      <td>1369.0</td>\n",
       "      <td>1987-06-24</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>Medium/Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>93</td>\n",
       "      <td>89+3</td>\n",
       "      <td>93</td>\n",
       "      <td>89+3</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80</td>\n",
       "      <td>23</td>\n",
       "      <td>LW</td>\n",
       "      <td>...</td>\n",
       "      <td>29</td>\n",
       "      <td>77+3</td>\n",
       "      <td>16+3</td>\n",
       "      <td>7.0</td>\n",
       "      <td>185</td>\n",
       "      <td>92</td>\n",
       "      <td>1354.0</td>\n",
       "      <td>1985-02-05</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>High/Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>90</td>\n",
       "      <td>88+2</td>\n",
       "      <td>93</td>\n",
       "      <td>88+2</td>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80</td>\n",
       "      <td>26</td>\n",
       "      <td>RS</td>\n",
       "      <td>...</td>\n",
       "      <td>30</td>\n",
       "      <td>78+3</td>\n",
       "      <td>14+3</td>\n",
       "      <td>11.0</td>\n",
       "      <td>180</td>\n",
       "      <td>90</td>\n",
       "      <td>105035.0</td>\n",
       "      <td>1984-01-23</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>High/Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sweden</td>\n",
       "      <td>88</td>\n",
       "      <td>84+3</td>\n",
       "      <td>86</td>\n",
       "      <td>86+3</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>95</td>\n",
       "      <td>27</td>\n",
       "      <td>ST</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>76+3</td>\n",
       "      <td>17+3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>195</td>\n",
       "      <td>90</td>\n",
       "      <td>1363.0</td>\n",
       "      <td>1981-10-03</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>Medium/Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>25</td>\n",
       "      <td>36+3</td>\n",
       "      <td>43</td>\n",
       "      <td>36+3</td>\n",
       "      <td>90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>92</td>\n",
       "      <td>25</td>\n",
       "      <td>GK</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>36+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>193</td>\n",
       "      <td>90</td>\n",
       "      <td>1337.0</td>\n",
       "      <td>1986-03-27</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161578</th>\n",
       "      <td>China PR</td>\n",
       "      <td>31</td>\n",
       "      <td>46</td>\n",
       "      <td>54</td>\n",
       "      <td>44+2</td>\n",
       "      <td>12</td>\n",
       "      <td>40.0</td>\n",
       "      <td>73</td>\n",
       "      <td>25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>38+2</td>\n",
       "      <td>14+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>180</td>\n",
       "      <td>61</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003-10-01</td>\n",
       "      <td>赵梓业</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161579</th>\n",
       "      <td>China PR</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>45</td>\n",
       "      <td>32+2</td>\n",
       "      <td>13</td>\n",
       "      <td>35.0</td>\n",
       "      <td>83</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>34+2</td>\n",
       "      <td>15+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>188</td>\n",
       "      <td>58</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003-06-02</td>\n",
       "      <td>吴俊杰</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161580</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>32</td>\n",
       "      <td>46</td>\n",
       "      <td>58</td>\n",
       "      <td>45+2</td>\n",
       "      <td>14</td>\n",
       "      <td>35.0</td>\n",
       "      <td>73</td>\n",
       "      <td>50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>44+2</td>\n",
       "      <td>14+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>181</td>\n",
       "      <td>58</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003-06-28</td>\n",
       "      <td>Kailin Barlow</td>\n",
       "      <td>High/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161581</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>47</td>\n",
       "      <td>46</td>\n",
       "      <td>57</td>\n",
       "      <td>45+2</td>\n",
       "      <td>7</td>\n",
       "      <td>43.0</td>\n",
       "      <td>68</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>39+2</td>\n",
       "      <td>15+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>175</td>\n",
       "      <td>70</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2005-05-20</td>\n",
       "      <td>Gideon Tetteh</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161582</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>20</td>\n",
       "      <td>31</td>\n",
       "      <td>55</td>\n",
       "      <td>30+2</td>\n",
       "      <td>6</td>\n",
       "      <td>30.0</td>\n",
       "      <td>70</td>\n",
       "      <td>42</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>30+2</td>\n",
       "      <td>13+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>180</td>\n",
       "      <td>63</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2004-07-09</td>\n",
       "      <td>Aqeel Al Dhafeeri</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>161583 rows × 103 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           nationality_name  power_long_shots    lw  movement_agility   ram  \\\n",
       "0                 Argentina                88  92+3                94  92+3   \n",
       "1                  Portugal                93  89+3                93  89+3   \n",
       "2               Netherlands                90  88+2                93  88+2   \n",
       "3                    Sweden                88  84+3                86  86+3   \n",
       "4                   Germany                25  36+3                43  36+3   \n",
       "...                     ...               ...   ...               ...   ...   \n",
       "161578             China PR                31    46                54  44+2   \n",
       "161579             China PR                25    34                45  32+2   \n",
       "161580  Republic of Ireland                32    46                58  45+2   \n",
       "161581  Republic of Ireland                47    46                57  45+2   \n",
       "161582         Saudi Arabia                20    31                55  30+2   \n",
       "\n",
       "        goalkeeping_positioning  mentality_composure  weight_kg  \\\n",
       "0                            14                  NaN         67   \n",
       "1                            14                  NaN         80   \n",
       "2                             5                  NaN         80   \n",
       "3                             9                  NaN         95   \n",
       "4                            90                  NaN         92   \n",
       "...                         ...                  ...        ...   \n",
       "161578                       12                 40.0         73   \n",
       "161579                       13                 35.0         83   \n",
       "161580                       14                 35.0         73   \n",
       "161581                        7                 43.0         68   \n",
       "161582                        6                 30.0         70   \n",
       "\n",
       "        defending_sliding_tackle nation_position  ...  age    cm    gk  \\\n",
       "0                             20              CF  ...   27  79+3  15+3   \n",
       "1                             23              LW  ...   29  77+3  16+3   \n",
       "2                             26              RS  ...   30  78+3  14+3   \n",
       "3                             27              ST  ...   32  76+3  17+3   \n",
       "4                             25              GK  ...   28  36+3  87+3   \n",
       "...                          ...             ...  ...  ...   ...   ...   \n",
       "161578                        25             NaN  ...   18  38+2  14+2   \n",
       "161579                        45             NaN  ...   19  34+2  15+2   \n",
       "161580                        50             NaN  ...   19  44+2  14+2   \n",
       "161581                        14             NaN  ...   17  39+2  15+2   \n",
       "161582                        42             NaN  ...   17  30+2  13+2   \n",
       "\n",
       "        nation_jersey_number height_cm  potential  nation_team_id         dob  \\\n",
       "0                       10.0       169         95          1369.0  1987-06-24   \n",
       "1                        7.0       185         92          1354.0  1985-02-05   \n",
       "2                       11.0       180         90        105035.0  1984-01-23   \n",
       "3                       10.0       195         90          1363.0  1981-10-03   \n",
       "4                        1.0       193         90          1337.0  1986-03-27   \n",
       "...                      ...       ...        ...             ...         ...   \n",
       "161578                   NaN       180         61             NaN  2003-10-01   \n",
       "161579                   NaN       188         58             NaN  2003-06-02   \n",
       "161580                   NaN       181         58             NaN  2003-06-28   \n",
       "161581                   NaN       175         70             NaN  2005-05-20   \n",
       "161582                   NaN       180         63             NaN  2004-07-09   \n",
       "\n",
       "                                  long_name      work_rate  \n",
       "0            Lionel Andrés Messi Cuccittini     Medium/Low  \n",
       "1       Cristiano Ronaldo dos Santos Aveiro       High/Low  \n",
       "2                              Arjen Robben       High/Low  \n",
       "3                        Zlatan Ibrahimović     Medium/Low  \n",
       "4                        Manuel Peter Neuer  Medium/Medium  \n",
       "...                                     ...            ...  \n",
       "161578                                  赵梓业  Medium/Medium  \n",
       "161579                                  吴俊杰  Medium/Medium  \n",
       "161580                        Kailin Barlow    High/Medium  \n",
       "161581                        Gideon Tetteh  Medium/Medium  \n",
       "161582                    Aqeel Al Dhafeeri  Medium/Medium  \n",
       "\n",
       "[161583 rows x 103 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dropping the columns that are not common in both datasets\n",
    "legacy = legacy[common_columns]\n",
    "legacy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "06070594-f952-4026-a364-632ea2d7e626",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nationality_name</th>\n",
       "      <th>power_long_shots</th>\n",
       "      <th>lw</th>\n",
       "      <th>movement_agility</th>\n",
       "      <th>ram</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>nation_position</th>\n",
       "      <th>...</th>\n",
       "      <th>age</th>\n",
       "      <th>cm</th>\n",
       "      <th>gk</th>\n",
       "      <th>nation_jersey_number</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>potential</th>\n",
       "      <th>nation_team_id</th>\n",
       "      <th>dob</th>\n",
       "      <th>long_name</th>\n",
       "      <th>work_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>94</td>\n",
       "      <td>92</td>\n",
       "      <td>91</td>\n",
       "      <td>93</td>\n",
       "      <td>14</td>\n",
       "      <td>96</td>\n",
       "      <td>72</td>\n",
       "      <td>24</td>\n",
       "      <td>RW</td>\n",
       "      <td>...</td>\n",
       "      <td>34</td>\n",
       "      <td>87+3</td>\n",
       "      <td>19+3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>170</td>\n",
       "      <td>93</td>\n",
       "      <td>1369.0</td>\n",
       "      <td>1987-06-24</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>Medium/Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Poland</td>\n",
       "      <td>87</td>\n",
       "      <td>85</td>\n",
       "      <td>77</td>\n",
       "      <td>86+3</td>\n",
       "      <td>8</td>\n",
       "      <td>88</td>\n",
       "      <td>81</td>\n",
       "      <td>19</td>\n",
       "      <td>RS</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>80+3</td>\n",
       "      <td>19+3</td>\n",
       "      <td>9.0</td>\n",
       "      <td>185</td>\n",
       "      <td>92</td>\n",
       "      <td>1353.0</td>\n",
       "      <td>1988-08-21</td>\n",
       "      <td>Robert Lewandowski</td>\n",
       "      <td>High/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "      <td>86</td>\n",
       "      <td>86+3</td>\n",
       "      <td>14</td>\n",
       "      <td>95</td>\n",
       "      <td>83</td>\n",
       "      <td>24</td>\n",
       "      <td>ST</td>\n",
       "      <td>...</td>\n",
       "      <td>36</td>\n",
       "      <td>78+3</td>\n",
       "      <td>20+3</td>\n",
       "      <td>7.0</td>\n",
       "      <td>187</td>\n",
       "      <td>91</td>\n",
       "      <td>1354.0</td>\n",
       "      <td>1985-02-05</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>High/Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>81</td>\n",
       "      <td>90</td>\n",
       "      <td>96</td>\n",
       "      <td>89+2</td>\n",
       "      <td>15</td>\n",
       "      <td>93</td>\n",
       "      <td>68</td>\n",
       "      <td>29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>29</td>\n",
       "      <td>82+3</td>\n",
       "      <td>20+3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>175</td>\n",
       "      <td>91</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1992-02-05</td>\n",
       "      <td>Neymar da Silva Santos Júnior</td>\n",
       "      <td>High/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>91</td>\n",
       "      <td>88</td>\n",
       "      <td>79</td>\n",
       "      <td>89+2</td>\n",
       "      <td>10</td>\n",
       "      <td>89</td>\n",
       "      <td>70</td>\n",
       "      <td>53</td>\n",
       "      <td>RCM</td>\n",
       "      <td>...</td>\n",
       "      <td>30</td>\n",
       "      <td>89+2</td>\n",
       "      <td>21+3</td>\n",
       "      <td>7.0</td>\n",
       "      <td>181</td>\n",
       "      <td>91</td>\n",
       "      <td>1325.0</td>\n",
       "      <td>1991-06-28</td>\n",
       "      <td>Kevin De Bruyne</td>\n",
       "      <td>High/High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19234</th>\n",
       "      <td>China PR</td>\n",
       "      <td>30</td>\n",
       "      <td>46</td>\n",
       "      <td>55</td>\n",
       "      <td>46+2</td>\n",
       "      <td>15</td>\n",
       "      <td>37</td>\n",
       "      <td>64</td>\n",
       "      <td>48</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>22</td>\n",
       "      <td>46+2</td>\n",
       "      <td>15+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>180</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1999-01-02</td>\n",
       "      <td>宋德福</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19235</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>38</td>\n",
       "      <td>47</td>\n",
       "      <td>64</td>\n",
       "      <td>47+2</td>\n",
       "      <td>8</td>\n",
       "      <td>47</td>\n",
       "      <td>70</td>\n",
       "      <td>47</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>47+2</td>\n",
       "      <td>14+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>175</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2002-03-18</td>\n",
       "      <td>Caoimhin Porter</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19236</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>34</td>\n",
       "      <td>46</td>\n",
       "      <td>58</td>\n",
       "      <td>47+2</td>\n",
       "      <td>10</td>\n",
       "      <td>36</td>\n",
       "      <td>72</td>\n",
       "      <td>48</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>21</td>\n",
       "      <td>47+2</td>\n",
       "      <td>12+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>178</td>\n",
       "      <td>55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000-02-07</td>\n",
       "      <td>Nathan Logue-Cunningham</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19237</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>41</td>\n",
       "      <td>47</td>\n",
       "      <td>72</td>\n",
       "      <td>45+2</td>\n",
       "      <td>14</td>\n",
       "      <td>47</td>\n",
       "      <td>66</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>39+2</td>\n",
       "      <td>15+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>173</td>\n",
       "      <td>60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2002-04-23</td>\n",
       "      <td>Luke Rudden</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19238</th>\n",
       "      <td>India</td>\n",
       "      <td>36</td>\n",
       "      <td>47</td>\n",
       "      <td>65</td>\n",
       "      <td>47+2</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>61</td>\n",
       "      <td>37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>46+2</td>\n",
       "      <td>16+2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>167</td>\n",
       "      <td>60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2002-02-06</td>\n",
       "      <td>Emanuel Lalchhanchhuaha</td>\n",
       "      <td>Medium/Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19239 rows × 103 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          nationality_name  power_long_shots  lw  movement_agility   ram  \\\n",
       "0                Argentina                94  92                91    93   \n",
       "1                   Poland                87  85                77  86+3   \n",
       "2                 Portugal                93  88                86  86+3   \n",
       "3                   Brazil                81  90                96  89+2   \n",
       "4                  Belgium                91  88                79  89+2   \n",
       "...                    ...               ...  ..               ...   ...   \n",
       "19234             China PR                30  46                55  46+2   \n",
       "19235  Republic of Ireland                38  47                64  47+2   \n",
       "19236  Republic of Ireland                34  46                58  47+2   \n",
       "19237  Republic of Ireland                41  47                72  45+2   \n",
       "19238                India                36  47                65  47+2   \n",
       "\n",
       "       goalkeeping_positioning  mentality_composure  weight_kg  \\\n",
       "0                           14                   96         72   \n",
       "1                            8                   88         81   \n",
       "2                           14                   95         83   \n",
       "3                           15                   93         68   \n",
       "4                           10                   89         70   \n",
       "...                        ...                  ...        ...   \n",
       "19234                       15                   37         64   \n",
       "19235                        8                   47         70   \n",
       "19236                       10                   36         72   \n",
       "19237                       14                   47         66   \n",
       "19238                        9                   36         61   \n",
       "\n",
       "       defending_sliding_tackle nation_position  ...  age    cm    gk  \\\n",
       "0                            24              RW  ...   34  87+3  19+3   \n",
       "1                            19              RS  ...   32  80+3  19+3   \n",
       "2                            24              ST  ...   36  78+3  20+3   \n",
       "3                            29             NaN  ...   29  82+3  20+3   \n",
       "4                            53             RCM  ...   30  89+2  21+3   \n",
       "...                         ...             ...  ...  ...   ...   ...   \n",
       "19234                        48             NaN  ...   22  46+2  15+2   \n",
       "19235                        47             NaN  ...   19  47+2  14+2   \n",
       "19236                        48             NaN  ...   21  47+2  12+2   \n",
       "19237                        11             NaN  ...   19  39+2  15+2   \n",
       "19238                        37             NaN  ...   19  46+2  16+2   \n",
       "\n",
       "       nation_jersey_number height_cm  potential  nation_team_id         dob  \\\n",
       "0                      10.0       170         93          1369.0  1987-06-24   \n",
       "1                       9.0       185         92          1353.0  1988-08-21   \n",
       "2                       7.0       187         91          1354.0  1985-02-05   \n",
       "3                       NaN       175         91             NaN  1992-02-05   \n",
       "4                       7.0       181         91          1325.0  1991-06-28   \n",
       "...                     ...       ...        ...             ...         ...   \n",
       "19234                   NaN       180         52             NaN  1999-01-02   \n",
       "19235                   NaN       175         59             NaN  2002-03-18   \n",
       "19236                   NaN       178         55             NaN  2000-02-07   \n",
       "19237                   NaN       173         60             NaN  2002-04-23   \n",
       "19238                   NaN       167         60             NaN  2002-02-06   \n",
       "\n",
       "                                 long_name      work_rate  \n",
       "0           Lionel Andrés Messi Cuccittini     Medium/Low  \n",
       "1                       Robert Lewandowski    High/Medium  \n",
       "2      Cristiano Ronaldo dos Santos Aveiro       High/Low  \n",
       "3            Neymar da Silva Santos Júnior    High/Medium  \n",
       "4                          Kevin De Bruyne      High/High  \n",
       "...                                    ...            ...  \n",
       "19234                                  宋德福  Medium/Medium  \n",
       "19235                      Caoimhin Porter  Medium/Medium  \n",
       "19236              Nathan Logue-Cunningham  Medium/Medium  \n",
       "19237                          Luke Rudden  Medium/Medium  \n",
       "19238              Emanuel Lalchhanchhuaha  Medium/Medium  \n",
       "\n",
       "[19239 rows x 103 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players_22 = players_22[common_columns]\n",
    "players_22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "da4d25a2-e4f1-4c50-977c-37420f091089",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nationality_name        0\n",
       "power_long_shots        0\n",
       "lw                      0\n",
       "movement_agility        0\n",
       "ram                     0\n",
       "                    ...  \n",
       "potential               0\n",
       "nation_team_id      18480\n",
       "dob                     0\n",
       "long_name               0\n",
       "work_rate               0\n",
       "Length: 103, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players_22.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c4710251-6b1a-4ef1-a442-16a8437f62e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        2\n",
      "1        2\n",
      "2        2\n",
      "3        5\n",
      "4        2\n",
      "        ..\n",
      "19234    7\n",
      "19235    7\n",
      "19236    7\n",
      "19237    7\n",
      "19238    7\n",
      "Length: 19239, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for NaNs in each row\n",
    "nan_counts_rows = players_22.isna().sum(axis=1)\n",
    "print(nan_counts_rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5d09ec40-3156-4f8b-b822-aa53c5bd0d4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0          4\n",
      "1          4\n",
      "2          4\n",
      "3          4\n",
      "4         10\n",
      "          ..\n",
      "161578     7\n",
      "161579     7\n",
      "161580     7\n",
      "161581     7\n",
      "161582     7\n",
      "Length: 161583, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for NaNs in each row\n",
    "nan_counts_rows = legacy.isna().sum(axis=1)\n",
    "print(nan_counts_rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3a748fe9-68e8-4104-a29a-7368e6c923d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nationality_name    object\n",
       "power_long_shots     int64\n",
       "lw                  object\n",
       "movement_agility     int64\n",
       "ram                 object\n",
       "                     ...  \n",
       "height_cm            int64\n",
       "potential            int64\n",
       "dob                 object\n",
       "long_name           object\n",
       "work_rate           object\n",
       "Length: 96, dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_percentage = players_22.isnull().mean()\n",
    "threshold=0.3\n",
    "players_22=players_22.loc[:,missing_percentage <=threshold]\n",
    "\n",
    "# Getting the data types of columns in the DataFrame\n",
    "column_types = players_22.dtypes\n",
    "column_types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fbb1ffdf-b0cb-4f37-bce1-86836aea12ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nationality_name    object\n",
       "power_long_shots     int64\n",
       "lw                  object\n",
       "movement_agility     int64\n",
       "ram                 object\n",
       "                     ...  \n",
       "height_cm            int64\n",
       "potential            int64\n",
       "dob                 object\n",
       "long_name           object\n",
       "work_rate           object\n",
       "Length: 95, dtype: object"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_percentage = legacy.isnull().mean()\n",
    "threshold=0.3\n",
    "legacy=legacy.loc[:,missing_percentage <=threshold]\n",
    "\n",
    "# Getting the data types of columns in the DataFrame\n",
    "column_types = legacy.dtypes\n",
    "column_types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "52735dae-46d9-4749-bd35-34627b907370",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19239 entries, 0 to 19238\n",
      "Data columns (total 96 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   nationality_name             19239 non-null  object \n",
      " 1   power_long_shots             19239 non-null  int64  \n",
      " 2   lw                           19239 non-null  object \n",
      " 3   movement_agility             19239 non-null  int64  \n",
      " 4   ram                          19239 non-null  object \n",
      " 5   goalkeeping_positioning      19239 non-null  int64  \n",
      " 6   mentality_composure          19239 non-null  int64  \n",
      " 7   weight_kg                    19239 non-null  int64  \n",
      " 8   defending_sliding_tackle     19239 non-null  int64  \n",
      " 9   skill_ball_control           19239 non-null  int64  \n",
      " 10  defending_standing_tackle    19239 non-null  int64  \n",
      " 11  short_name                   19239 non-null  object \n",
      " 12  passing                      17107 non-null  float64\n",
      " 13  rcb                          19239 non-null  object \n",
      " 14  league_level                 19178 non-null  float64\n",
      " 15  movement_acceleration        19239 non-null  int64  \n",
      " 16  mentality_aggression         19239 non-null  int64  \n",
      " 17  rw                           19239 non-null  object \n",
      " 18  lcb                          19239 non-null  object \n",
      " 19  rs                           19239 non-null  object \n",
      " 20  body_type                    19239 non-null  object \n",
      " 21  rf                           19239 non-null  object \n",
      " 22  attacking_volleys            19239 non-null  int64  \n",
      " 23  power_strength               19239 non-null  int64  \n",
      " 24  mentality_interceptions      19239 non-null  int64  \n",
      " 25  preferred_foot               19239 non-null  object \n",
      " 26  power_shot_power             19239 non-null  int64  \n",
      " 27  nationality_id               19239 non-null  int64  \n",
      " 28  lb                           19239 non-null  object \n",
      " 29  mentality_positioning        19239 non-null  int64  \n",
      " 30  goalkeeping_diving           19239 non-null  int64  \n",
      " 31  lcm                          19239 non-null  object \n",
      " 32  overall                      19239 non-null  int64  \n",
      " 33  league_name                  19178 non-null  object \n",
      " 34  attacking_short_passing      19239 non-null  int64  \n",
      " 35  rb                           19239 non-null  object \n",
      " 36  goalkeeping_kicking          19239 non-null  int64  \n",
      " 37  skill_curve                  19239 non-null  int64  \n",
      " 38  release_clause_eur           18063 non-null  float64\n",
      " 39  defending                    17107 non-null  float64\n",
      " 40  st                           19239 non-null  object \n",
      " 41  goalkeeping_handling         19239 non-null  int64  \n",
      " 42  rwb                          19239 non-null  object \n",
      " 43  international_reputation     19239 non-null  int64  \n",
      " 44  power_jumping                19239 non-null  int64  \n",
      " 45  pace                         17107 non-null  float64\n",
      " 46  ldm                          19239 non-null  object \n",
      " 47  weak_foot                    19239 non-null  int64  \n",
      " 48  lam                          19239 non-null  object \n",
      " 49  rcm                          19239 non-null  object \n",
      " 50  movement_reactions           19239 non-null  int64  \n",
      " 51  club_name                    19178 non-null  object \n",
      " 52  shooting                     17107 non-null  float64\n",
      " 53  cf                           19239 non-null  object \n",
      " 54  movement_sprint_speed        19239 non-null  int64  \n",
      " 55  cdm                          19239 non-null  object \n",
      " 56  player_positions             19239 non-null  object \n",
      " 57  value_eur                    19165 non-null  float64\n",
      " 58  physic                       17107 non-null  float64\n",
      " 59  club_position                19178 non-null  object \n",
      " 60  rm                           19239 non-null  object \n",
      " 61  skill_fk_accuracy            19239 non-null  int64  \n",
      " 62  attacking_heading_accuracy   19239 non-null  int64  \n",
      " 63  movement_balance             19239 non-null  int64  \n",
      " 64  real_face                    19239 non-null  object \n",
      " 65  cb                           19239 non-null  object \n",
      " 66  attacking_crossing           19239 non-null  int64  \n",
      " 67  defending_marking_awareness  19239 non-null  int64  \n",
      " 68  ls                           19239 non-null  object \n",
      " 69  skill_long_passing           19239 non-null  int64  \n",
      " 70  power_stamina                19239 non-null  int64  \n",
      " 71  player_face_url              19239 non-null  object \n",
      " 72  skill_moves                  19239 non-null  int64  \n",
      " 73  club_jersey_number           19178 non-null  float64\n",
      " 74  mentality_penalties          19239 non-null  int64  \n",
      " 75  cam                          19239 non-null  object \n",
      " 76  wage_eur                     19178 non-null  float64\n",
      " 77  rdm                          19239 non-null  object \n",
      " 78  skill_dribbling              19239 non-null  int64  \n",
      " 79  mentality_vision             19239 non-null  int64  \n",
      " 80  goalkeeping_reflexes         19239 non-null  int64  \n",
      " 81  lwb                          19239 non-null  object \n",
      " 82  lf                           19239 non-null  object \n",
      " 83  club_team_id                 19178 non-null  float64\n",
      " 84  lm                           19239 non-null  object \n",
      " 85  player_url                   19239 non-null  object \n",
      " 86  dribbling                    17107 non-null  float64\n",
      " 87  attacking_finishing          19239 non-null  int64  \n",
      " 88  age                          19239 non-null  int64  \n",
      " 89  cm                           19239 non-null  object \n",
      " 90  gk                           19239 non-null  object \n",
      " 91  height_cm                    19239 non-null  int64  \n",
      " 92  potential                    19239 non-null  int64  \n",
      " 93  dob                          19239 non-null  object \n",
      " 94  long_name                    19239 non-null  object \n",
      " 95  work_rate                    19239 non-null  object \n",
      "dtypes: float64(12), int64(43), object(41)\n",
      "memory usage: 14.1+ MB\n"
     ]
    }
   ],
   "source": [
    "players_22.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "852258be-8c06-4cde-8544-09bb98e8a00a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 161583 entries, 0 to 161582\n",
      "Data columns (total 95 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   nationality_name             161583 non-null  object \n",
      " 1   power_long_shots             161583 non-null  int64  \n",
      " 2   lw                           161583 non-null  object \n",
      " 3   movement_agility             161583 non-null  int64  \n",
      " 4   ram                          161583 non-null  object \n",
      " 5   goalkeeping_positioning      161583 non-null  int64  \n",
      " 6   mentality_composure          128722 non-null  float64\n",
      " 7   weight_kg                    161583 non-null  int64  \n",
      " 8   defending_sliding_tackle     161583 non-null  int64  \n",
      " 9   skill_ball_control           161583 non-null  int64  \n",
      " 10  defending_standing_tackle    161583 non-null  int64  \n",
      " 11  short_name                   161583 non-null  object \n",
      " 12  passing                      143614 non-null  float64\n",
      " 13  rcb                          161583 non-null  object \n",
      " 14  league_level                 158866 non-null  float64\n",
      " 15  movement_acceleration        161583 non-null  int64  \n",
      " 16  mentality_aggression         161583 non-null  int64  \n",
      " 17  rw                           161583 non-null  object \n",
      " 18  lcb                          161583 non-null  object \n",
      " 19  rs                           161583 non-null  object \n",
      " 20  body_type                    161583 non-null  object \n",
      " 21  rf                           161583 non-null  object \n",
      " 22  attacking_volleys            161583 non-null  int64  \n",
      " 23  power_strength               161583 non-null  int64  \n",
      " 24  mentality_interceptions      161583 non-null  int64  \n",
      " 25  preferred_foot               161583 non-null  object \n",
      " 26  power_shot_power             161583 non-null  int64  \n",
      " 27  nationality_id               161583 non-null  int64  \n",
      " 28  lb                           161583 non-null  object \n",
      " 29  mentality_positioning        161583 non-null  int64  \n",
      " 30  goalkeeping_diving           161583 non-null  int64  \n",
      " 31  lcm                          161583 non-null  object \n",
      " 32  overall                      161583 non-null  int64  \n",
      " 33  league_name                  159810 non-null  object \n",
      " 34  attacking_short_passing      161583 non-null  int64  \n",
      " 35  rb                           161583 non-null  object \n",
      " 36  goalkeeping_kicking          161583 non-null  int64  \n",
      " 37  skill_curve                  161583 non-null  int64  \n",
      " 38  defending                    143614 non-null  float64\n",
      " 39  st                           161583 non-null  object \n",
      " 40  goalkeeping_handling         161583 non-null  int64  \n",
      " 41  rwb                          161583 non-null  object \n",
      " 42  international_reputation     161583 non-null  int64  \n",
      " 43  power_jumping                161583 non-null  int64  \n",
      " 44  pace                         143614 non-null  float64\n",
      " 45  ldm                          161583 non-null  object \n",
      " 46  weak_foot                    161583 non-null  int64  \n",
      " 47  lam                          161583 non-null  object \n",
      " 48  rcm                          161583 non-null  object \n",
      " 49  movement_reactions           161583 non-null  int64  \n",
      " 50  club_name                    159810 non-null  object \n",
      " 51  shooting                     143614 non-null  float64\n",
      " 52  cf                           161583 non-null  object \n",
      " 53  movement_sprint_speed        161583 non-null  int64  \n",
      " 54  cdm                          161583 non-null  object \n",
      " 55  player_positions             161583 non-null  object \n",
      " 56  value_eur                    159530 non-null  float64\n",
      " 57  physic                       143614 non-null  float64\n",
      " 58  club_position                159810 non-null  object \n",
      " 59  rm                           161583 non-null  object \n",
      " 60  skill_fk_accuracy            161583 non-null  int64  \n",
      " 61  attacking_heading_accuracy   161583 non-null  int64  \n",
      " 62  movement_balance             161583 non-null  int64  \n",
      " 63  real_face                    161583 non-null  object \n",
      " 64  cb                           161583 non-null  object \n",
      " 65  attacking_crossing           161583 non-null  int64  \n",
      " 66  defending_marking_awareness  161583 non-null  int64  \n",
      " 67  ls                           161583 non-null  object \n",
      " 68  skill_long_passing           161583 non-null  int64  \n",
      " 69  power_stamina                161583 non-null  int64  \n",
      " 70  player_face_url              161583 non-null  object \n",
      " 71  skill_moves                  161583 non-null  int64  \n",
      " 72  club_jersey_number           159810 non-null  float64\n",
      " 73  mentality_penalties          161583 non-null  int64  \n",
      " 74  cam                          161583 non-null  object \n",
      " 75  wage_eur                     159822 non-null  float64\n",
      " 76  rdm                          161583 non-null  object \n",
      " 77  skill_dribbling              161583 non-null  int64  \n",
      " 78  mentality_vision             161583 non-null  int64  \n",
      " 79  goalkeeping_reflexes         161583 non-null  int64  \n",
      " 80  lwb                          161583 non-null  object \n",
      " 81  lf                           161583 non-null  object \n",
      " 82  club_team_id                 159810 non-null  float64\n",
      " 83  lm                           161583 non-null  object \n",
      " 84  player_url                   161583 non-null  object \n",
      " 85  dribbling                    143614 non-null  float64\n",
      " 86  attacking_finishing          161583 non-null  int64  \n",
      " 87  age                          161583 non-null  int64  \n",
      " 88  cm                           161583 non-null  object \n",
      " 89  gk                           161583 non-null  object \n",
      " 90  height_cm                    161583 non-null  int64  \n",
      " 91  potential                    161583 non-null  int64  \n",
      " 92  dob                          161583 non-null  object \n",
      " 93  long_name                    161583 non-null  object \n",
      " 94  work_rate                    161583 non-null  object \n",
      "dtypes: float64(12), int64(42), object(41)\n",
      "memory usage: 117.1+ MB\n"
     ]
    }
   ],
   "source": [
    "legacy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b3620b7-11cd-4580-920a-a203ba3c03b7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1da899b2-94c5-4fea-8386-ab8db0752e1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 161583 entries, 0 to 161582\n",
      "Data columns (total 95 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   nationality_name             161583 non-null  object \n",
      " 1   power_long_shots             161583 non-null  int64  \n",
      " 2   lw                           161583 non-null  object \n",
      " 3   movement_agility             161583 non-null  int64  \n",
      " 4   ram                          161583 non-null  object \n",
      " 5   goalkeeping_positioning      161583 non-null  int64  \n",
      " 6   mentality_composure          128722 non-null  float64\n",
      " 7   weight_kg                    161583 non-null  int64  \n",
      " 8   defending_sliding_tackle     161583 non-null  int64  \n",
      " 9   skill_ball_control           161583 non-null  int64  \n",
      " 10  defending_standing_tackle    161583 non-null  int64  \n",
      " 11  short_name                   161583 non-null  object \n",
      " 12  passing                      143614 non-null  float64\n",
      " 13  rcb                          161583 non-null  object \n",
      " 14  league_level                 158866 non-null  float64\n",
      " 15  movement_acceleration        161583 non-null  int64  \n",
      " 16  mentality_aggression         161583 non-null  int64  \n",
      " 17  rw                           161583 non-null  object \n",
      " 18  lcb                          161583 non-null  object \n",
      " 19  rs                           161583 non-null  object \n",
      " 20  body_type                    161583 non-null  object \n",
      " 21  rf                           161583 non-null  object \n",
      " 22  attacking_volleys            161583 non-null  int64  \n",
      " 23  power_strength               161583 non-null  int64  \n",
      " 24  mentality_interceptions      161583 non-null  int64  \n",
      " 25  preferred_foot               161583 non-null  object \n",
      " 26  power_shot_power             161583 non-null  int64  \n",
      " 27  nationality_id               161583 non-null  int64  \n",
      " 28  lb                           161583 non-null  object \n",
      " 29  mentality_positioning        161583 non-null  int64  \n",
      " 30  goalkeeping_diving           161583 non-null  int64  \n",
      " 31  lcm                          161583 non-null  object \n",
      " 32  overall                      161583 non-null  int64  \n",
      " 33  league_name                  159810 non-null  object \n",
      " 34  attacking_short_passing      161583 non-null  int64  \n",
      " 35  rb                           161583 non-null  object \n",
      " 36  goalkeeping_kicking          161583 non-null  int64  \n",
      " 37  skill_curve                  161583 non-null  int64  \n",
      " 38  defending                    143614 non-null  float64\n",
      " 39  st                           161583 non-null  object \n",
      " 40  goalkeeping_handling         161583 non-null  int64  \n",
      " 41  rwb                          161583 non-null  object \n",
      " 42  international_reputation     161583 non-null  int64  \n",
      " 43  power_jumping                161583 non-null  int64  \n",
      " 44  pace                         143614 non-null  float64\n",
      " 45  ldm                          161583 non-null  object \n",
      " 46  weak_foot                    161583 non-null  int64  \n",
      " 47  lam                          161583 non-null  object \n",
      " 48  rcm                          161583 non-null  object \n",
      " 49  movement_reactions           161583 non-null  int64  \n",
      " 50  club_name                    159810 non-null  object \n",
      " 51  shooting                     143614 non-null  float64\n",
      " 52  cf                           161583 non-null  object \n",
      " 53  movement_sprint_speed        161583 non-null  int64  \n",
      " 54  cdm                          161583 non-null  object \n",
      " 55  player_positions             161583 non-null  object \n",
      " 56  value_eur                    159530 non-null  float64\n",
      " 57  physic                       143614 non-null  float64\n",
      " 58  club_position                159810 non-null  object \n",
      " 59  rm                           161583 non-null  object \n",
      " 60  skill_fk_accuracy            161583 non-null  int64  \n",
      " 61  attacking_heading_accuracy   161583 non-null  int64  \n",
      " 62  movement_balance             161583 non-null  int64  \n",
      " 63  real_face                    161583 non-null  object \n",
      " 64  cb                           161583 non-null  object \n",
      " 65  attacking_crossing           161583 non-null  int64  \n",
      " 66  defending_marking_awareness  161583 non-null  int64  \n",
      " 67  ls                           161583 non-null  object \n",
      " 68  skill_long_passing           161583 non-null  int64  \n",
      " 69  power_stamina                161583 non-null  int64  \n",
      " 70  player_face_url              161583 non-null  object \n",
      " 71  skill_moves                  161583 non-null  int64  \n",
      " 72  club_jersey_number           159810 non-null  float64\n",
      " 73  mentality_penalties          161583 non-null  int64  \n",
      " 74  cam                          161583 non-null  object \n",
      " 75  wage_eur                     159822 non-null  float64\n",
      " 76  rdm                          161583 non-null  object \n",
      " 77  skill_dribbling              161583 non-null  int64  \n",
      " 78  mentality_vision             161583 non-null  int64  \n",
      " 79  goalkeeping_reflexes         161583 non-null  int64  \n",
      " 80  lwb                          161583 non-null  object \n",
      " 81  lf                           161583 non-null  object \n",
      " 82  club_team_id                 159810 non-null  float64\n",
      " 83  lm                           161583 non-null  object \n",
      " 84  player_url                   161583 non-null  object \n",
      " 85  dribbling                    143614 non-null  float64\n",
      " 86  attacking_finishing          161583 non-null  int64  \n",
      " 87  age                          161583 non-null  int64  \n",
      " 88  cm                           161583 non-null  object \n",
      " 89  gk                           161583 non-null  object \n",
      " 90  height_cm                    161583 non-null  int64  \n",
      " 91  potential                    161583 non-null  int64  \n",
      " 92  dob                          161583 non-null  object \n",
      " 93  long_name                    161583 non-null  object \n",
      " 94  work_rate                    161583 non-null  object \n",
      "dtypes: float64(12), int64(42), object(41)\n",
      "memory usage: 117.1+ MB\n"
     ]
    }
   ],
   "source": [
    "legacy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6045e255-5079-4ddb-8889-3f565fd060f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "High-cardinality columns: Index(['nationality_name', 'lw', 'ram', 'short_name', 'rcb', 'rw', 'lcb', 'rs',\n",
      "       'rf', 'lb', 'lcm', 'rb', 'st', 'rwb', 'ldm', 'lam', 'rcm', 'club_name',\n",
      "       'cf', 'cdm', 'player_positions', 'rm', 'cb', 'ls', 'cam', 'rdm', 'lwb',\n",
      "       'lf', 'lm', 'cm', 'dob', 'long_name'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "def clean_dataframe(df, columns_to_drop, high_cardinality_threshold=50):\n",
    "    # Dropping specified problematic columns\n",
    "    cleaned_df = df.drop(columns=columns_to_drop)\n",
    "\n",
    "    # Identify high-cardinality columns\n",
    "    high_card_cols = cleaned_df.select_dtypes(include=object).nunique()\n",
    "    high_card_cols = high_card_cols[high_card_cols > high_cardinality_threshold].index\n",
    "    print(\"High-cardinality columns:\", high_card_cols)\n",
    "\n",
    "    # Drop high-cardinality columns\n",
    "    reduced_df = cleaned_df.drop(columns=high_card_cols)\n",
    "\n",
    "    return reduced_df\n",
    "\n",
    "# Applying the clean_dataframe function\n",
    "columns_to_drop = ['gk', 'player_url', 'player_face_url']\n",
    "legacy_reduced = clean_dataframe(legacy, columns_to_drop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6142668f-fd62-4eca-a86b-16edd84655b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ensure legacy_reduced is a DataFrame\n",
    "if not isinstance(legacy_reduced, pd.DataFrame):\n",
    "    raise ValueError(\"legacy_reduced should be a DataFrame\")\n",
    "    \n",
    "# Impute missing values for numerical columns\n",
    "numeric_cols = legacy_reduced.select_dtypes(include=[np.float64, np.int64]).columns\n",
    "legacy_reduced[numeric_cols] = legacy_reduced[numeric_cols].fillna(legacy_reduced[numeric_cols].median())\n",
    "\n",
    "# Impute missing values for categorical columns\n",
    "categorical_cols = legacy_reduced.select_dtypes(include=object).columns\n",
    "legacy_reduced[categorical_cols] = legacy_reduced[categorical_cols].fillna(legacy_reduced[categorical_cols].mode().iloc[0])\n",
    "\n",
    "# One-hot encode categorical columns\n",
    "legacy_encoded = pd.get_dummies(legacy_reduced, columns=categorical_cols, drop_first=True)\n",
    "\n",
    "# Convert boolean columns to integers\n",
    "boolean_cols = legacy.select_dtypes(include=['bool']).columns\n",
    "legacy[boolean_cols] = legacy[boolean_cols].astype(int)\n",
    "\n",
    "# Combine the transformed DataFrame with the boolean columns\n",
    "legacy = pd.concat([legacy_encoded, legacy[boolean_cols].reset_index(drop=True)], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f0aa0b6a-bc97-46aa-80a0-d03310a94939",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(161583, 144)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legacy.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ab5d6f8b-8c43-4f6a-aa9d-966c7df82967",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "High-cardinality columns: Index(['nationality_name', 'lw', 'ram', 'short_name', 'rcb', 'rw', 'lcb', 'rs',\n",
      "       'rf', 'lb', 'lcm', 'league_name', 'rb', 'st', 'rwb', 'ldm', 'lam',\n",
      "       'rcm', 'club_name', 'cf', 'cdm', 'player_positions', 'rm', 'cb', 'ls',\n",
      "       'cam', 'rdm', 'lwb', 'lf', 'lm', 'cm', 'dob', 'long_name'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Applying the clean_dataframe function on testing dataset\n",
    "columns_to_drop = ['gk', 'player_url', 'player_face_url']\n",
    "players_22_reduced = clean_dataframe(players_22, columns_to_drop)\n",
    "players_22=players_22_reduced"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ef0cc202-3bf8-4060-9d74-7c81d0121aff",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer, make_column_selector\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Pipeline for categorical columns\n",
    "catPipe = Pipeline([\n",
    "    (\"impute\", SimpleImputer(strategy=\"most_frequent\")),\n",
    "    (\"onehot\", OneHotEncoder(sparse=True, drop='if_binary'))\n",
    "])\n",
    "\n",
    "# Pipeline for numerical columns\n",
    "quantPipe = Pipeline([\n",
    "    (\"impute\", SimpleImputer(strategy=\"median\"))\n",
    "])\n",
    "\n",
    "# Combine the pipelines using ColumnTransformer\n",
    "fullPipe = ColumnTransformer([\n",
    "    (\"quant\", quantPipe, make_column_selector(dtype_include=[np.float64, np.int64])),\n",
    "    (\"cat\", catPipe, make_column_selector(dtype_include=object))\n",
    "])\n",
    "\n",
    "# Apply the transformation pipeline to the DataFrame\n",
    "piped = fullPipe.fit_transform(players_22)\n",
    "\n",
    "# Retrieve the feature names for categorical columns\n",
    "# The names are obtained from the 'onehot' step of the categorical pipeline\n",
    "cat_features = fullPipe.named_transformers_['cat']['onehot'].get_feature_names_out(players_22.select_dtypes(include=object).columns)\n",
    "\n",
    "# Retrieve the names of numerical columns\n",
    "quant_features = players_22.select_dtypes(include=[np.float64, np.int64]).columns\n",
    "\n",
    "# Combine the names of numerical and categorical columns to get all feature names\n",
    "all_features = np.concatenate([quant_features, cat_features])\n",
    "\n",
    "# Create the transformed DataFrame with the transformed data and feature names\n",
    "players_22_transformed = pd.DataFrame(piped, columns=all_features)\n",
    "\n",
    "# Convert boolean columns to integers\n",
    "boolean_cols = players_22.select_dtypes(include=['bool']).columns\n",
    "players_22[boolean_cols] =players_22[boolean_cols].astype(int)\n",
    "\n",
    "# Combine the transformed DataFrame with the boolean columns\n",
    "players_22 = pd.concat([players_22_transformed, players_22[boolean_cols].reset_index(drop=True)], axis=1) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8df82615-d07d-473d-a564-9efda683ebf1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19239, 105)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players_22.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "aa3d5da6-477f-484c-9886-198d1465e168",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'age',\n",
       " 'attacking_crossing',\n",
       " 'attacking_finishing',\n",
       " 'attacking_heading_accuracy',\n",
       " 'attacking_short_passing',\n",
       " 'attacking_volleys',\n",
       " 'body_type_Lean (170-185)',\n",
       " 'body_type_Lean (185+)',\n",
       " 'body_type_Normal (170-)',\n",
       " 'body_type_Normal (170-185)',\n",
       " 'body_type_Normal (185+)',\n",
       " 'body_type_Stocky (170-)',\n",
       " 'body_type_Stocky (170-185)',\n",
       " 'body_type_Stocky (185+)',\n",
       " 'body_type_Unique',\n",
       " 'club_jersey_number',\n",
       " 'club_position_CB',\n",
       " 'club_position_CDM',\n",
       " 'club_position_CF',\n",
       " 'club_position_CM',\n",
       " 'club_position_GK',\n",
       " 'club_position_LAM',\n",
       " 'club_position_LB',\n",
       " 'club_position_LCB',\n",
       " 'club_position_LCM',\n",
       " 'club_position_LDM',\n",
       " 'club_position_LF',\n",
       " 'club_position_LM',\n",
       " 'club_position_LS',\n",
       " 'club_position_LW',\n",
       " 'club_position_LWB',\n",
       " 'club_position_RAM',\n",
       " 'club_position_RB',\n",
       " 'club_position_RCB',\n",
       " 'club_position_RCM',\n",
       " 'club_position_RDM',\n",
       " 'club_position_RES',\n",
       " 'club_position_RF',\n",
       " 'club_position_RM',\n",
       " 'club_position_RS',\n",
       " 'club_position_RW',\n",
       " 'club_position_RWB',\n",
       " 'club_position_ST',\n",
       " 'club_position_SUB',\n",
       " 'club_team_id',\n",
       " 'defending',\n",
       " 'defending_marking_awareness',\n",
       " 'defending_sliding_tackle',\n",
       " 'defending_standing_tackle',\n",
       " 'dribbling',\n",
       " 'goalkeeping_diving',\n",
       " 'goalkeeping_handling',\n",
       " 'goalkeeping_kicking',\n",
       " 'goalkeeping_positioning',\n",
       " 'goalkeeping_reflexes',\n",
       " 'height_cm',\n",
       " 'international_reputation',\n",
       " 'league_level',\n",
       " 'league_name_1. HNL',\n",
       " 'league_name_2. Bundesliga',\n",
       " 'league_name_3. Liga',\n",
       " 'league_name_A-League',\n",
       " 'league_name_Allsvenskan',\n",
       " 'league_name_Bundesliga',\n",
       " 'league_name_Championship',\n",
       " 'league_name_Ekstraklasa',\n",
       " 'league_name_Eliteserien',\n",
       " 'league_name_Eredivisie',\n",
       " 'league_name_Fortuna Liga',\n",
       " 'league_name_J-League',\n",
       " 'league_name_Jupiler Pro League',\n",
       " 'league_name_K League 1',\n",
       " 'league_name_La Liga',\n",
       " 'league_name_La Liga 2',\n",
       " 'league_name_League One',\n",
       " 'league_name_League Two',\n",
       " 'league_name_Liga 1',\n",
       " 'league_name_Liga BetPlay',\n",
       " 'league_name_Liga De Futbol Prof',\n",
       " 'league_name_Liga MX',\n",
       " 'league_name_Liga Portugal',\n",
       " 'league_name_Liga Pro',\n",
       " 'league_name_Liga Profesional',\n",
       " 'league_name_Ligue 1',\n",
       " 'league_name_Ligue 2',\n",
       " 'league_name_Major League Soccer',\n",
       " 'league_name_NB I.',\n",
       " 'league_name_National League',\n",
       " 'league_name_Premier Division',\n",
       " 'league_name_Premier League',\n",
       " 'league_name_Premiership',\n",
       " 'league_name_Primera Division',\n",
       " 'league_name_Primera División',\n",
       " 'league_name_Pro League',\n",
       " 'league_name_Rest of World',\n",
       " 'league_name_Serie A',\n",
       " 'league_name_Serie B',\n",
       " 'league_name_Super League',\n",
       " 'league_name_Super Lig',\n",
       " 'league_name_Superliga',\n",
       " 'league_name_Veikkausliiga',\n",
       " 'mentality_aggression',\n",
       " 'mentality_composure',\n",
       " 'mentality_interceptions',\n",
       " 'mentality_penalties',\n",
       " 'mentality_positioning',\n",
       " 'mentality_vision',\n",
       " 'movement_acceleration',\n",
       " 'movement_agility',\n",
       " 'movement_balance',\n",
       " 'movement_reactions',\n",
       " 'movement_sprint_speed',\n",
       " 'nationality_id',\n",
       " 'overall',\n",
       " 'pace',\n",
       " 'passing',\n",
       " 'physic',\n",
       " 'potential',\n",
       " 'power_jumping',\n",
       " 'power_long_shots',\n",
       " 'power_shot_power',\n",
       " 'power_stamina',\n",
       " 'power_strength',\n",
       " 'preferred_foot_Right',\n",
       " 'real_face_Yes',\n",
       " 'shooting',\n",
       " 'skill_ball_control',\n",
       " 'skill_curve',\n",
       " 'skill_dribbling',\n",
       " 'skill_fk_accuracy',\n",
       " 'skill_long_passing',\n",
       " 'skill_moves',\n",
       " 'value_eur',\n",
       " 'wage_eur',\n",
       " 'weak_foot',\n",
       " 'weight_kg',\n",
       " 'work_rate_High/Low',\n",
       " 'work_rate_High/Medium',\n",
       " 'work_rate_Low/High',\n",
       " 'work_rate_Low/Low',\n",
       " 'work_rate_Low/Medium',\n",
       " 'work_rate_Medium/High',\n",
       " 'work_rate_Medium/Low',\n",
       " 'work_rate_Medium/Medium'}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legacy_columns = set(legacy.columns)\n",
    "legacy_columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a3515db6-2b4f-4a1c-83c9-d8f2f8a63ef7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'age',\n",
       " 'attacking_crossing',\n",
       " 'attacking_finishing',\n",
       " 'attacking_heading_accuracy',\n",
       " 'attacking_short_passing',\n",
       " 'attacking_volleys',\n",
       " 'body_type_Lean (170-)',\n",
       " 'body_type_Lean (170-185)',\n",
       " 'body_type_Lean (185+)',\n",
       " 'body_type_Normal (170-)',\n",
       " 'body_type_Normal (170-185)',\n",
       " 'body_type_Normal (185+)',\n",
       " 'body_type_Stocky (170-)',\n",
       " 'body_type_Stocky (170-185)',\n",
       " 'body_type_Stocky (185+)',\n",
       " 'body_type_Unique',\n",
       " 'club_jersey_number',\n",
       " 'club_position_CAM',\n",
       " 'club_position_CB',\n",
       " 'club_position_CDM',\n",
       " 'club_position_CF',\n",
       " 'club_position_CM',\n",
       " 'club_position_GK',\n",
       " 'club_position_LAM',\n",
       " 'club_position_LB',\n",
       " 'club_position_LCB',\n",
       " 'club_position_LCM',\n",
       " 'club_position_LDM',\n",
       " 'club_position_LF',\n",
       " 'club_position_LM',\n",
       " 'club_position_LS',\n",
       " 'club_position_LW',\n",
       " 'club_position_LWB',\n",
       " 'club_position_RAM',\n",
       " 'club_position_RB',\n",
       " 'club_position_RCB',\n",
       " 'club_position_RCM',\n",
       " 'club_position_RDM',\n",
       " 'club_position_RES',\n",
       " 'club_position_RF',\n",
       " 'club_position_RM',\n",
       " 'club_position_RS',\n",
       " 'club_position_RW',\n",
       " 'club_position_RWB',\n",
       " 'club_position_ST',\n",
       " 'club_position_SUB',\n",
       " 'club_team_id',\n",
       " 'defending',\n",
       " 'defending_marking_awareness',\n",
       " 'defending_sliding_tackle',\n",
       " 'defending_standing_tackle',\n",
       " 'dribbling',\n",
       " 'goalkeeping_diving',\n",
       " 'goalkeeping_handling',\n",
       " 'goalkeeping_kicking',\n",
       " 'goalkeeping_positioning',\n",
       " 'goalkeeping_reflexes',\n",
       " 'height_cm',\n",
       " 'international_reputation',\n",
       " 'league_level',\n",
       " 'mentality_aggression',\n",
       " 'mentality_composure',\n",
       " 'mentality_interceptions',\n",
       " 'mentality_penalties',\n",
       " 'mentality_positioning',\n",
       " 'mentality_vision',\n",
       " 'movement_acceleration',\n",
       " 'movement_agility',\n",
       " 'movement_balance',\n",
       " 'movement_reactions',\n",
       " 'movement_sprint_speed',\n",
       " 'nationality_id',\n",
       " 'overall',\n",
       " 'pace',\n",
       " 'passing',\n",
       " 'physic',\n",
       " 'potential',\n",
       " 'power_jumping',\n",
       " 'power_long_shots',\n",
       " 'power_shot_power',\n",
       " 'power_stamina',\n",
       " 'power_strength',\n",
       " 'preferred_foot_Right',\n",
       " 'real_face_Yes',\n",
       " 'release_clause_eur',\n",
       " 'shooting',\n",
       " 'skill_ball_control',\n",
       " 'skill_curve',\n",
       " 'skill_dribbling',\n",
       " 'skill_fk_accuracy',\n",
       " 'skill_long_passing',\n",
       " 'skill_moves',\n",
       " 'value_eur',\n",
       " 'wage_eur',\n",
       " 'weak_foot',\n",
       " 'weight_kg',\n",
       " 'work_rate_High/High',\n",
       " 'work_rate_High/Low',\n",
       " 'work_rate_High/Medium',\n",
       " 'work_rate_Low/High',\n",
       " 'work_rate_Low/Low',\n",
       " 'work_rate_Low/Medium',\n",
       " 'work_rate_Medium/High',\n",
       " 'work_rate_Medium/Low',\n",
       " 'work_rate_Medium/Medium'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players_22_columns = set(players_22.columns)\n",
    "players_22_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f7c8cd2f-1dab-45e4-9525-81be5a2e894e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['club_position_LAM',\n",
       " 'power_long_shots',\n",
       " 'movement_agility',\n",
       " 'goalkeeping_positioning',\n",
       " 'preferred_foot_Right',\n",
       " 'mentality_composure',\n",
       " 'weight_kg',\n",
       " 'defending_sliding_tackle',\n",
       " 'skill_ball_control',\n",
       " 'defending_standing_tackle',\n",
       " 'passing',\n",
       " 'work_rate_Low/Low',\n",
       " 'body_type_Stocky (170-185)',\n",
       " 'body_type_Normal (170-185)',\n",
       " 'club_position_ST',\n",
       " 'league_level',\n",
       " 'work_rate_High/Low',\n",
       " 'movement_acceleration',\n",
       " 'mentality_aggression',\n",
       " 'work_rate_Medium/High',\n",
       " 'club_position_LF',\n",
       " 'club_position_RB',\n",
       " 'club_position_CM',\n",
       " 'attacking_volleys',\n",
       " 'club_position_SUB',\n",
       " 'power_strength',\n",
       " 'mentality_interceptions',\n",
       " 'power_shot_power',\n",
       " 'nationality_id',\n",
       " 'club_position_RW',\n",
       " 'mentality_positioning',\n",
       " 'goalkeeping_diving',\n",
       " 'club_position_CB',\n",
       " 'overall',\n",
       " 'attacking_short_passing',\n",
       " 'club_position_RWB',\n",
       " 'club_position_LB',\n",
       " 'goalkeeping_kicking',\n",
       " 'skill_curve',\n",
       " 'work_rate_Medium/Medium',\n",
       " 'defending',\n",
       " 'club_position_RDM',\n",
       " 'goalkeeping_handling',\n",
       " 'work_rate_Low/Medium',\n",
       " 'club_position_GK',\n",
       " 'real_face_Yes',\n",
       " 'club_position_LCB',\n",
       " 'club_position_RCM',\n",
       " 'international_reputation',\n",
       " 'body_type_Lean (170-185)',\n",
       " 'power_jumping',\n",
       " 'pace',\n",
       " 'club_position_LS',\n",
       " 'body_type_Stocky (170-)',\n",
       " 'club_position_LW',\n",
       " 'weak_foot',\n",
       " 'club_position_CDM',\n",
       " 'club_position_RF',\n",
       " 'work_rate_High/Medium',\n",
       " 'movement_reactions',\n",
       " 'shooting',\n",
       " 'body_type_Normal (170-)',\n",
       " 'movement_sprint_speed',\n",
       " 'value_eur',\n",
       " 'physic',\n",
       " 'skill_fk_accuracy',\n",
       " 'attacking_heading_accuracy',\n",
       " 'movement_balance',\n",
       " 'body_type_Normal (185+)',\n",
       " 'attacking_crossing',\n",
       " 'defending_marking_awareness',\n",
       " 'skill_long_passing',\n",
       " 'body_type_Stocky (185+)',\n",
       " 'power_stamina',\n",
       " 'skill_moves',\n",
       " 'body_type_Lean (185+)',\n",
       " 'club_position_RAM',\n",
       " 'club_position_RCB',\n",
       " 'club_jersey_number',\n",
       " 'mentality_penalties',\n",
       " 'wage_eur',\n",
       " 'club_position_LCM',\n",
       " 'club_position_LDM',\n",
       " 'work_rate_Medium/Low',\n",
       " 'skill_dribbling',\n",
       " 'mentality_vision',\n",
       " 'goalkeeping_reflexes',\n",
       " 'club_team_id',\n",
       " 'club_position_LWB',\n",
       " 'work_rate_Low/High',\n",
       " 'club_position_RS',\n",
       " 'club_position_CF',\n",
       " 'dribbling',\n",
       " 'attacking_finishing',\n",
       " 'age',\n",
       " 'club_position_LM',\n",
       " 'body_type_Unique',\n",
       " 'height_cm',\n",
       " 'potential',\n",
       " 'club_position_RM',\n",
       " 'club_position_RES']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_columns = legacy_columns .intersection(players_22_columns)\n",
    "common_columns=list(common_columns)\n",
    "common_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2c00d19c-785e-46d3-b539-8ef1e1ca16e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'league_name_1. HNL',\n",
       " 'league_name_2. Bundesliga',\n",
       " 'league_name_3. Liga',\n",
       " 'league_name_A-League',\n",
       " 'league_name_Allsvenskan',\n",
       " 'league_name_Bundesliga',\n",
       " 'league_name_Championship',\n",
       " 'league_name_Ekstraklasa',\n",
       " 'league_name_Eliteserien',\n",
       " 'league_name_Eredivisie',\n",
       " 'league_name_Fortuna Liga',\n",
       " 'league_name_J-League',\n",
       " 'league_name_Jupiler Pro League',\n",
       " 'league_name_K League 1',\n",
       " 'league_name_La Liga',\n",
       " 'league_name_La Liga 2',\n",
       " 'league_name_League One',\n",
       " 'league_name_League Two',\n",
       " 'league_name_Liga 1',\n",
       " 'league_name_Liga BetPlay',\n",
       " 'league_name_Liga De Futbol Prof',\n",
       " 'league_name_Liga MX',\n",
       " 'league_name_Liga Portugal',\n",
       " 'league_name_Liga Pro',\n",
       " 'league_name_Liga Profesional',\n",
       " 'league_name_Ligue 1',\n",
       " 'league_name_Ligue 2',\n",
       " 'league_name_Major League Soccer',\n",
       " 'league_name_NB I.',\n",
       " 'league_name_National League',\n",
       " 'league_name_Premier Division',\n",
       " 'league_name_Premier League',\n",
       " 'league_name_Premiership',\n",
       " 'league_name_Primera Division',\n",
       " 'league_name_Primera División',\n",
       " 'league_name_Pro League',\n",
       " 'league_name_Rest of World',\n",
       " 'league_name_Serie A',\n",
       " 'league_name_Serie B',\n",
       " 'league_name_Super League',\n",
       " 'league_name_Super Lig',\n",
       " 'league_name_Superliga',\n",
       " 'league_name_Veikkausliiga'}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_only_in_legacy= legacy_columns - players_22_columns\n",
    "columns_only_in_legacy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7affdf76-ff06-4507-8800-9a0c79e2da77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'body_type_Lean (170-)',\n",
       " 'club_position_CAM',\n",
       " 'release_clause_eur',\n",
       " 'work_rate_High/High'}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_only_in_players_22 = players_22_columns - legacy_columns\n",
    "columns_only_in_players_22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e581dcc8-5f73-4825-8838-ba6db62c1216",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>club_position_LAM</th>\n",
       "      <th>power_long_shots</th>\n",
       "      <th>movement_agility</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>preferred_foot_Right</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>skill_ball_control</th>\n",
       "      <th>defending_standing_tackle</th>\n",
       "      <th>...</th>\n",
       "      <th>club_position_CF</th>\n",
       "      <th>dribbling</th>\n",
       "      <th>attacking_finishing</th>\n",
       "      <th>age</th>\n",
       "      <th>club_position_LM</th>\n",
       "      <th>body_type_Unique</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>potential</th>\n",
       "      <th>club_position_RM</th>\n",
       "      <th>club_position_RES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19234</th>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19235</th>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19236</th>\n",
       "      <td>0.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19237</th>\n",
       "      <td>0.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19238</th>\n",
       "      <td>0.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19239 rows × 101 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       club_position_LAM  power_long_shots  movement_agility  \\\n",
       "0                    0.0              94.0              91.0   \n",
       "1                    0.0              87.0              77.0   \n",
       "2                    0.0              93.0              86.0   \n",
       "3                    0.0              81.0              96.0   \n",
       "4                    0.0              91.0              79.0   \n",
       "...                  ...               ...               ...   \n",
       "19234                0.0              30.0              55.0   \n",
       "19235                0.0              38.0              64.0   \n",
       "19236                0.0              34.0              58.0   \n",
       "19237                0.0              41.0              72.0   \n",
       "19238                0.0              36.0              65.0   \n",
       "\n",
       "       goalkeeping_positioning  preferred_foot_Right  mentality_composure  \\\n",
       "0                         14.0                   0.0                 96.0   \n",
       "1                          8.0                   1.0                 88.0   \n",
       "2                         14.0                   1.0                 95.0   \n",
       "3                         15.0                   1.0                 93.0   \n",
       "4                         10.0                   1.0                 89.0   \n",
       "...                        ...                   ...                  ...   \n",
       "19234                     15.0                   1.0                 37.0   \n",
       "19235                      8.0                   1.0                 47.0   \n",
       "19236                     10.0                   1.0                 36.0   \n",
       "19237                     14.0                   1.0                 47.0   \n",
       "19238                      9.0                   1.0                 36.0   \n",
       "\n",
       "       weight_kg  defending_sliding_tackle  skill_ball_control  \\\n",
       "0           72.0                      24.0                96.0   \n",
       "1           81.0                      19.0                88.0   \n",
       "2           83.0                      24.0                88.0   \n",
       "3           68.0                      29.0                95.0   \n",
       "4           70.0                      53.0                91.0   \n",
       "...          ...                       ...                 ...   \n",
       "19234       64.0                      48.0                49.0   \n",
       "19235       70.0                      47.0                42.0   \n",
       "19236       72.0                      48.0                49.0   \n",
       "19237       66.0                      11.0                45.0   \n",
       "19238       61.0                      37.0                38.0   \n",
       "\n",
       "       defending_standing_tackle  ...  club_position_CF  dribbling  \\\n",
       "0                           35.0  ...               0.0       95.0   \n",
       "1                           42.0  ...               0.0       86.0   \n",
       "2                           32.0  ...               0.0       88.0   \n",
       "3                           32.0  ...               0.0       94.0   \n",
       "4                           65.0  ...               0.0       88.0   \n",
       "...                          ...  ...               ...        ...   \n",
       "19234                       43.0  ...               0.0       48.0   \n",
       "19235                       44.0  ...               0.0       46.0   \n",
       "19236                       44.0  ...               0.0       49.0   \n",
       "19237                       14.0  ...               0.0       48.0   \n",
       "19238                       31.0  ...               0.0       48.0   \n",
       "\n",
       "       attacking_finishing   age  club_position_LM  body_type_Unique  \\\n",
       "0                     95.0  34.0               0.0               1.0   \n",
       "1                     95.0  32.0               0.0               1.0   \n",
       "2                     95.0  36.0               0.0               1.0   \n",
       "3                     83.0  29.0               0.0               1.0   \n",
       "4                     82.0  30.0               0.0               1.0   \n",
       "...                    ...   ...               ...               ...   \n",
       "19234                 32.0  22.0               0.0               0.0   \n",
       "19235                 33.0  19.0               0.0               0.0   \n",
       "19236                 32.0  21.0               0.0               0.0   \n",
       "19237                 49.0  19.0               0.0               0.0   \n",
       "19238                 32.0  19.0               0.0               0.0   \n",
       "\n",
       "       height_cm  potential  club_position_RM  club_position_RES  \n",
       "0          170.0       93.0               0.0                0.0  \n",
       "1          185.0       92.0               0.0                0.0  \n",
       "2          187.0       91.0               0.0                0.0  \n",
       "3          175.0       91.0               0.0                0.0  \n",
       "4          181.0       91.0               0.0                0.0  \n",
       "...          ...        ...               ...                ...  \n",
       "19234      180.0       52.0               0.0                0.0  \n",
       "19235      175.0       59.0               0.0                1.0  \n",
       "19236      178.0       55.0               0.0                1.0  \n",
       "19237      173.0       60.0               0.0                1.0  \n",
       "19238      167.0       60.0               0.0                0.0  \n",
       "\n",
       "[19239 rows x 101 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players_22 = players_22[common_columns]\n",
    "players_22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "375041b8-f6e3-4c55-b1be-9d8c67ffcc86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>club_position_LAM</th>\n",
       "      <th>power_long_shots</th>\n",
       "      <th>movement_agility</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>preferred_foot_Right</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>skill_ball_control</th>\n",
       "      <th>defending_standing_tackle</th>\n",
       "      <th>...</th>\n",
       "      <th>club_position_CF</th>\n",
       "      <th>dribbling</th>\n",
       "      <th>attacking_finishing</th>\n",
       "      <th>age</th>\n",
       "      <th>club_position_LM</th>\n",
       "      <th>body_type_Unique</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>potential</th>\n",
       "      <th>club_position_RM</th>\n",
       "      <th>club_position_RES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>88</td>\n",
       "      <td>94</td>\n",
       "      <td>14</td>\n",
       "      <td>False</td>\n",
       "      <td>59.0</td>\n",
       "      <td>67</td>\n",
       "      <td>20</td>\n",
       "      <td>96</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>96.0</td>\n",
       "      <td>94</td>\n",
       "      <td>27</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>169</td>\n",
       "      <td>95</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>93</td>\n",
       "      <td>93</td>\n",
       "      <td>14</td>\n",
       "      <td>True</td>\n",
       "      <td>59.0</td>\n",
       "      <td>80</td>\n",
       "      <td>23</td>\n",
       "      <td>92</td>\n",
       "      <td>31</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>91.0</td>\n",
       "      <td>95</td>\n",
       "      <td>29</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>185</td>\n",
       "      <td>92</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>90</td>\n",
       "      <td>93</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>59.0</td>\n",
       "      <td>80</td>\n",
       "      <td>26</td>\n",
       "      <td>90</td>\n",
       "      <td>26</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>92.0</td>\n",
       "      <td>85</td>\n",
       "      <td>30</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>180</td>\n",
       "      <td>90</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>88</td>\n",
       "      <td>86</td>\n",
       "      <td>9</td>\n",
       "      <td>True</td>\n",
       "      <td>59.0</td>\n",
       "      <td>95</td>\n",
       "      <td>27</td>\n",
       "      <td>90</td>\n",
       "      <td>41</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>86.0</td>\n",
       "      <td>91</td>\n",
       "      <td>32</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>195</td>\n",
       "      <td>90</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>25</td>\n",
       "      <td>43</td>\n",
       "      <td>90</td>\n",
       "      <td>True</td>\n",
       "      <td>59.0</td>\n",
       "      <td>92</td>\n",
       "      <td>25</td>\n",
       "      <td>31</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>63.0</td>\n",
       "      <td>25</td>\n",
       "      <td>28</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>193</td>\n",
       "      <td>90</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161578</th>\n",
       "      <td>False</td>\n",
       "      <td>31</td>\n",
       "      <td>54</td>\n",
       "      <td>12</td>\n",
       "      <td>True</td>\n",
       "      <td>40.0</td>\n",
       "      <td>73</td>\n",
       "      <td>25</td>\n",
       "      <td>45</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>47.0</td>\n",
       "      <td>49</td>\n",
       "      <td>18</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>180</td>\n",
       "      <td>61</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161579</th>\n",
       "      <td>False</td>\n",
       "      <td>25</td>\n",
       "      <td>45</td>\n",
       "      <td>13</td>\n",
       "      <td>False</td>\n",
       "      <td>35.0</td>\n",
       "      <td>83</td>\n",
       "      <td>45</td>\n",
       "      <td>32</td>\n",
       "      <td>51</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>34.0</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>188</td>\n",
       "      <td>58</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161580</th>\n",
       "      <td>False</td>\n",
       "      <td>32</td>\n",
       "      <td>58</td>\n",
       "      <td>14</td>\n",
       "      <td>True</td>\n",
       "      <td>35.0</td>\n",
       "      <td>73</td>\n",
       "      <td>50</td>\n",
       "      <td>35</td>\n",
       "      <td>45</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>46.0</td>\n",
       "      <td>30</td>\n",
       "      <td>19</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>181</td>\n",
       "      <td>58</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161581</th>\n",
       "      <td>False</td>\n",
       "      <td>47</td>\n",
       "      <td>57</td>\n",
       "      <td>7</td>\n",
       "      <td>True</td>\n",
       "      <td>43.0</td>\n",
       "      <td>68</td>\n",
       "      <td>14</td>\n",
       "      <td>43</td>\n",
       "      <td>17</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>46.0</td>\n",
       "      <td>56</td>\n",
       "      <td>17</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>175</td>\n",
       "      <td>70</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161582</th>\n",
       "      <td>False</td>\n",
       "      <td>20</td>\n",
       "      <td>55</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "      <td>30.0</td>\n",
       "      <td>70</td>\n",
       "      <td>42</td>\n",
       "      <td>31</td>\n",
       "      <td>45</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>32.0</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>180</td>\n",
       "      <td>63</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>161583 rows × 101 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        club_position_LAM  power_long_shots  movement_agility  \\\n",
       "0                   False                88                94   \n",
       "1                   False                93                93   \n",
       "2                   False                90                93   \n",
       "3                   False                88                86   \n",
       "4                   False                25                43   \n",
       "...                   ...               ...               ...   \n",
       "161578              False                31                54   \n",
       "161579              False                25                45   \n",
       "161580              False                32                58   \n",
       "161581              False                47                57   \n",
       "161582              False                20                55   \n",
       "\n",
       "        goalkeeping_positioning  preferred_foot_Right  mentality_composure  \\\n",
       "0                            14                 False                 59.0   \n",
       "1                            14                  True                 59.0   \n",
       "2                             5                 False                 59.0   \n",
       "3                             9                  True                 59.0   \n",
       "4                            90                  True                 59.0   \n",
       "...                         ...                   ...                  ...   \n",
       "161578                       12                  True                 40.0   \n",
       "161579                       13                 False                 35.0   \n",
       "161580                       14                  True                 35.0   \n",
       "161581                        7                  True                 43.0   \n",
       "161582                        6                  True                 30.0   \n",
       "\n",
       "        weight_kg  defending_sliding_tackle  skill_ball_control  \\\n",
       "0              67                        20                  96   \n",
       "1              80                        23                  92   \n",
       "2              80                        26                  90   \n",
       "3              95                        27                  90   \n",
       "4              92                        25                  31   \n",
       "...           ...                       ...                 ...   \n",
       "161578         73                        25                  45   \n",
       "161579         83                        45                  32   \n",
       "161580         73                        50                  35   \n",
       "161581         68                        14                  43   \n",
       "161582         70                        42                  31   \n",
       "\n",
       "        defending_standing_tackle  ...  club_position_CF  dribbling  \\\n",
       "0                              21  ...              True       96.0   \n",
       "1                              31  ...             False       91.0   \n",
       "2                              26  ...             False       92.0   \n",
       "3                              41  ...             False       86.0   \n",
       "4                              25  ...             False       63.0   \n",
       "...                           ...  ...               ...        ...   \n",
       "161578                         21  ...             False       47.0   \n",
       "161579                         51  ...             False       34.0   \n",
       "161580                         45  ...             False       46.0   \n",
       "161581                         17  ...             False       46.0   \n",
       "161582                         45  ...             False       32.0   \n",
       "\n",
       "        attacking_finishing  age  club_position_LM  body_type_Unique  \\\n",
       "0                        94   27             False             False   \n",
       "1                        95   29             False             False   \n",
       "2                        85   30             False             False   \n",
       "3                        91   32             False             False   \n",
       "4                        25   28             False             False   \n",
       "...                     ...  ...               ...               ...   \n",
       "161578                   49   18             False             False   \n",
       "161579                   19   19             False             False   \n",
       "161580                   30   19             False             False   \n",
       "161581                   56   17             False             False   \n",
       "161582                   19   17             False             False   \n",
       "\n",
       "        height_cm  potential  club_position_RM  club_position_RES  \n",
       "0             169         95             False              False  \n",
       "1             185         92             False              False  \n",
       "2             180         90             False              False  \n",
       "3             195         90             False              False  \n",
       "4             193         90             False              False  \n",
       "...           ...        ...               ...                ...  \n",
       "161578        180         61             False               True  \n",
       "161579        188         58             False               True  \n",
       "161580        181         58             False               True  \n",
       "161581        175         70             False               True  \n",
       "161582        180         63             False               True  \n",
       "\n",
       "[161583 rows x 101 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legacy=legacy[common_columns]\n",
    "legacy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f718d104-1bcb-4e62-b7dd-8026f53511ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0         93\n",
      "1         92\n",
      "2         90\n",
      "3         90\n",
      "4         90\n",
      "          ..\n",
      "161578    46\n",
      "161579    46\n",
      "161580    46\n",
      "161581    46\n",
      "161582    46\n",
      "Name: overall, Length: 161583, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(legacy['overall'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2fbe327e-69cc-4097-9d2c-51e5cd4db66c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation with 'overall':\n",
      " overall                    1.000000\n",
      "movement_reactions         0.845753\n",
      "potential                  0.695362\n",
      "passing                    0.629868\n",
      "wage_eur                   0.607297\n",
      "                             ...   \n",
      "club_team_id              -0.179689\n",
      "club_jersey_number        -0.186911\n",
      "league_level              -0.222646\n",
      "work_rate_Medium/Medium   -0.229328\n",
      "club_position_RES         -0.347752\n",
      "Name: overall, Length: 101, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Calculate the correlation matrix\n",
    "corr_matrix = legacy.corr()\n",
    "\n",
    "# Print the correlation of each feature with 'overall'(the dependent variable)\n",
    "correlations_with_overall = corr_matrix['overall'].sort_values(ascending=False)\n",
    "print(\"Correlation with 'overall':\\n\", correlations_with_overall)\n",
    "\n",
    "# Plot the correlations\n",
    "plt.figure(figsize=(12, 6))\n",
    "correlations_with_overall[1:].plot(kind='bar')\n",
    "plt.title('Correlation of Features with Overall Rating')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b9856179-810b-436f-b92d-729d66c84ac6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected top features:\n",
      " Index(['movement_reactions', 'potential', 'passing', 'wage_eur',\n",
      "       'mentality_composure', 'value_eur', 'dribbling',\n",
      "       'attacking_short_passing', 'mentality_vision',\n",
      "       'international_reputation'],\n",
      "      dtype='object')\n",
      "Scaled feature data (first 5 rows):\n",
      "    movement_reactions  potential   passing   wage_eur  mentality_composure  \\\n",
      "0            3.535775   3.875315  2.926570  24.697104             0.085565   \n",
      "1            3.099571   3.396013  2.421008  16.681825             0.085565   \n",
      "2            2.990520   3.076478  2.623233  12.101666             0.085565   \n",
      "3            2.554317   3.076478  2.421008  12.101666             0.085565   \n",
      "4            2.990520   3.076478  0.095424  13.246706             0.085565   \n",
      "\n",
      "   value_eur  dribbling  attacking_short_passing  mentality_vision  \\\n",
      "0  16.447428   3.480487                 2.086204          2.588430   \n",
      "1  12.846177   2.965866                 1.609554          1.957672   \n",
      "2   8.742427   3.068791                 1.881925          2.167924   \n",
      "3   8.407427   2.451245                 1.745740          2.097840   \n",
      "4  10.249927   0.083989                -1.114157         -2.317466   \n",
      "\n",
      "   international_reputation  \n",
      "0                 10.148137  \n",
      "1                 10.148137  \n",
      "2                 10.148137  \n",
      "3                 10.148137  \n",
      "4                 10.148137  \n"
     ]
    }
   ],
   "source": [
    "#  top features based on the correlation plot\n",
    "\n",
    "num_top_features = 10\n",
    "top_features = correlations_with_overall.index[1:num_top_features + 1]\n",
    "\n",
    "# Prepare data for training with the selected features\n",
    "x = legacy[top_features]\n",
    "y = legacy['overall']\n",
    "\n",
    "# Scale the independent variables\n",
    "scaler = StandardScaler()\n",
    "x_scaled = scaler.fit_transform(x)\n",
    "x=pd.DataFrame(x_scaled , columns =top_features)\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2 , random_state=42)\n",
    "\n",
    "\n",
    "# Print out the selected features and the scaled data for verification\n",
    "print(\"Selected top features:\\n\", top_features)\n",
    "print(\"Scaled feature data (first 5 rows):\\n\", x.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1e1ca77e-7f16-4a61-84a3-e0c646cdd729",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(129266, 10)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtrain.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "48111b8a-6f90-4eb5-a113-e3b6cef7432c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32317, 10)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtest.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "926c7182-d841-48b1-a652-2cdd84db141b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69722     76\n",
       "145131    74\n",
       "97854     64\n",
       "77978     66\n",
       "105151    82\n",
       "Name: overall, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ytrain.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f80754aa-dffb-4881-a422-127a1908ec88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>potential</th>\n",
       "      <th>passing</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>dribbling</th>\n",
       "      <th>attacking_short_passing</th>\n",
       "      <th>mentality_vision</th>\n",
       "      <th>international_reputation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>69722</th>\n",
       "      <td>1.136656</td>\n",
       "      <td>0.999503</td>\n",
       "      <td>-0.612362</td>\n",
       "      <td>1.338291</td>\n",
       "      <td>1.174982</td>\n",
       "      <td>1.121175</td>\n",
       "      <td>0.598610</td>\n",
       "      <td>0.315792</td>\n",
       "      <td>0.345735</td>\n",
       "      <td>2.327560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145131</th>\n",
       "      <td>1.572859</td>\n",
       "      <td>0.999503</td>\n",
       "      <td>0.904323</td>\n",
       "      <td>1.567299</td>\n",
       "      <td>1.265767</td>\n",
       "      <td>0.534925</td>\n",
       "      <td>1.319079</td>\n",
       "      <td>0.792441</td>\n",
       "      <td>0.976493</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97854</th>\n",
       "      <td>-1.589615</td>\n",
       "      <td>0.040899</td>\n",
       "      <td>0.095424</td>\n",
       "      <td>-0.264765</td>\n",
       "      <td>-1.276207</td>\n",
       "      <td>-0.306763</td>\n",
       "      <td>0.083989</td>\n",
       "      <td>-2.271734</td>\n",
       "      <td>-1.266203</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77978</th>\n",
       "      <td>0.264249</td>\n",
       "      <td>-0.757937</td>\n",
       "      <td>-1.623486</td>\n",
       "      <td>-0.402170</td>\n",
       "      <td>0.902628</td>\n",
       "      <td>-0.306763</td>\n",
       "      <td>-1.768647</td>\n",
       "      <td>-0.297043</td>\n",
       "      <td>-1.336287</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105151</th>\n",
       "      <td>2.009063</td>\n",
       "      <td>1.798340</td>\n",
       "      <td>1.713222</td>\n",
       "      <td>2.254323</td>\n",
       "      <td>1.628906</td>\n",
       "      <td>4.136176</td>\n",
       "      <td>1.730776</td>\n",
       "      <td>1.609554</td>\n",
       "      <td>1.396998</td>\n",
       "      <td>2.327560</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        movement_reactions  potential   passing  wage_eur  \\\n",
       "69722             1.136656   0.999503 -0.612362  1.338291   \n",
       "145131            1.572859   0.999503  0.904323  1.567299   \n",
       "97854            -1.589615   0.040899  0.095424 -0.264765   \n",
       "77978             0.264249  -0.757937 -1.623486 -0.402170   \n",
       "105151            2.009063   1.798340  1.713222  2.254323   \n",
       "\n",
       "        mentality_composure  value_eur  dribbling  attacking_short_passing  \\\n",
       "69722              1.174982   1.121175   0.598610                 0.315792   \n",
       "145131             1.265767   0.534925   1.319079                 0.792441   \n",
       "97854             -1.276207  -0.306763   0.083989                -2.271734   \n",
       "77978              0.902628  -0.306763  -1.768647                -0.297043   \n",
       "105151             1.628906   4.136176   1.730776                 1.609554   \n",
       "\n",
       "        mentality_vision  international_reputation  \n",
       "69722           0.345735                  2.327560  \n",
       "145131          0.976493                 -0.279299  \n",
       "97854          -1.266203                 -0.279299  \n",
       "77978          -1.336287                 -0.279299  \n",
       "105151          1.396998                  2.327560  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtrain.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9fbc63b1-9f51-4d4f-ba2f-62babb25c94f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.series.Series'>\n",
      "Index: 32317 entries, 9061 to 14334\n",
      "Series name: overall\n",
      "Non-Null Count  Dtype\n",
      "--------------  -----\n",
      "32317 non-null  int64\n",
      "dtypes: int64(1)\n",
      "memory usage: 505.0 KB\n"
     ]
    }
   ],
   "source": [
    "ytest.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "44b72e28-6432-4611-8929-2673a278487c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>potential</th>\n",
       "      <th>passing</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>dribbling</th>\n",
       "      <th>attacking_short_passing</th>\n",
       "      <th>mentality_vision</th>\n",
       "      <th>international_reputation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9061</th>\n",
       "      <td>0.155199</td>\n",
       "      <td>0.839736</td>\n",
       "      <td>1.308772</td>\n",
       "      <td>-0.264765</td>\n",
       "      <td>0.085565</td>\n",
       "      <td>-0.349475</td>\n",
       "      <td>0.289837</td>\n",
       "      <td>1.200998</td>\n",
       "      <td>1.256830</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154203</th>\n",
       "      <td>-0.171954</td>\n",
       "      <td>-0.598170</td>\n",
       "      <td>-0.309025</td>\n",
       "      <td>-0.468582</td>\n",
       "      <td>-0.277574</td>\n",
       "      <td>-0.252325</td>\n",
       "      <td>0.598610</td>\n",
       "      <td>-0.365136</td>\n",
       "      <td>0.485903</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149642</th>\n",
       "      <td>0.373300</td>\n",
       "      <td>0.040899</td>\n",
       "      <td>0.600986</td>\n",
       "      <td>-0.218964</td>\n",
       "      <td>0.539489</td>\n",
       "      <td>-0.118325</td>\n",
       "      <td>0.804458</td>\n",
       "      <td>0.451977</td>\n",
       "      <td>0.906408</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136295</th>\n",
       "      <td>-0.717208</td>\n",
       "      <td>-0.917705</td>\n",
       "      <td>-0.915699</td>\n",
       "      <td>-0.402170</td>\n",
       "      <td>-0.459144</td>\n",
       "      <td>-0.298388</td>\n",
       "      <td>-1.459874</td>\n",
       "      <td>0.043420</td>\n",
       "      <td>-0.775613</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74878</th>\n",
       "      <td>0.591402</td>\n",
       "      <td>2.277642</td>\n",
       "      <td>0.904323</td>\n",
       "      <td>-0.310567</td>\n",
       "      <td>0.902628</td>\n",
       "      <td>-0.017825</td>\n",
       "      <td>1.422003</td>\n",
       "      <td>0.656255</td>\n",
       "      <td>1.046577</td>\n",
       "      <td>-0.279299</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        movement_reactions  potential   passing  wage_eur  \\\n",
       "9061              0.155199   0.839736  1.308772 -0.264765   \n",
       "154203           -0.171954  -0.598170 -0.309025 -0.468582   \n",
       "149642            0.373300   0.040899  0.600986 -0.218964   \n",
       "136295           -0.717208  -0.917705 -0.915699 -0.402170   \n",
       "74878             0.591402   2.277642  0.904323 -0.310567   \n",
       "\n",
       "        mentality_composure  value_eur  dribbling  attacking_short_passing  \\\n",
       "9061               0.085565  -0.349475   0.289837                 1.200998   \n",
       "154203            -0.277574  -0.252325   0.598610                -0.365136   \n",
       "149642             0.539489  -0.118325   0.804458                 0.451977   \n",
       "136295            -0.459144  -0.298388  -1.459874                 0.043420   \n",
       "74878              0.902628  -0.017825   1.422003                 0.656255   \n",
       "\n",
       "        mentality_vision  international_reputation  \n",
       "9061            1.256830                 -0.279299  \n",
       "154203          0.485903                 -0.279299  \n",
       "149642          0.906408                 -0.279299  \n",
       "136295         -0.775613                 -0.279299  \n",
       "74878           1.046577                 -0.279299  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtest.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "aaeaef88-11df-4ecf-b361-249a04ea5c65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns in training data:\n",
      "Index(['movement_reactions', 'potential', 'passing', 'wage_eur',\n",
      "       'mentality_composure', 'value_eur', 'dribbling',\n",
      "       'attacking_short_passing', 'mentality_vision',\n",
      "       'international_reputation'],\n",
      "      dtype='object')\n",
      "Columns in test data:\n",
      "Index(['movement_reactions', 'potential', 'passing', 'wage_eur',\n",
      "       'mentality_composure', 'value_eur', 'dribbling',\n",
      "       'attacking_short_passing', 'mentality_vision',\n",
      "       'international_reputation'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Check columns in the training data\n",
    "print(\"Columns in training data:\")\n",
    "print(xtrain.columns)\n",
    "\n",
    "# Check columns in the test data\n",
    "print(\"Columns in test data:\")\n",
    "print(xtest.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f285713f-2a88-4461-afec-2d26bc96df93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['movement_reactions', 'potential', 'passing', 'wage_eur',\n",
       "       'mentality_composure', 'value_eur', 'dribbling',\n",
       "       'attacking_short_passing', 'mentality_vision',\n",
       "       'international_reputation'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#showung the features used to train the model\n",
    "xtrain.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "48e38a36-2975-4752-aa0b-ea836db4b06f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VotingRegressor\n",
      "Cross-Validation Mean MSE: 2.105463983561376\n",
      "Mean Absolute Error: 1.035615749657285\n",
      "Mean Squared Error: 2.0603419328939965\n",
      "Root Mean Squared Error: 1.4353891224660986\n",
      "R2 Score: 0.9584302885731611\n",
      "\n",
      "\n",
      "Voting Regressor Performance:\n",
      "Cross-Validation Mean MSE: 2.105463983561376\n",
      "Mean Absolute Error: 1.035615749657285\n",
      "Mean Squared Error: 2.0603419328939965\n",
      "Root Mean Squared Error: 1.4353891224660986\n",
      "R2 Score: 0.9584302885731611\n",
      "RandomForestRegressor\n",
      "Cross-Validation Mean MSE: 1.9473985872495903\n",
      "Mean Absolute Error: 0.9139100856544617\n",
      "Mean Squared Error: 1.8687781226641338\n",
      "Root Mean Squared Error: 1.3670325975133635\n",
      "R2 Score: 0.9622953034932311\n",
      "\n",
      "\n",
      "XGBRegressor\n",
      "Cross-Validation Mean MSE: 2.178657163887035\n",
      "Mean Absolute Error: 1.075158707483292\n",
      "Mean Squared Error: 2.1753260973691115\n",
      "Root Mean Squared Error: 1.4748986735939225\n",
      "R2 Score: 0.9561103539741633\n",
      "\n",
      "\n",
      "GradientBoostingRegressor\n",
      "Cross-Validation Mean MSE: 3.130664700800259\n",
      "Mean Absolute Error: 1.3264781623995563\n",
      "Mean Squared Error: 3.082675881363694\n",
      "Root Mean Squared Error: 1.7557550744234498\n",
      "R2 Score: 0.9378035534952354\n",
      "\n",
      "\n",
      "Final Ensemble Model (Voting Regressor) Performance:\n",
      "Mean Absolute Error: 1.035615749657285\n",
      "Mean Squared Error: 2.0603419328939965\n",
      "Root Mean Squared Error: 1.4353891224660986\n",
      "R2 Score: 0.9584302885731611\n",
      "[65.53409592 64.25997452 68.67241004 ... 57.10285661 64.5388514\n",
      " 53.95915395]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.model_selection import cross_val_score, cross_val_predict, train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.linear_model import LinearRegression, Lasso\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "# Function to evaluate and cross-validate models\n",
    "def evaluate_model(model, xtrain, ytrain, xtest, ytest):\n",
    "    \n",
    "    # Performing cross-validation\n",
    "    cv_scores = cross_val_score(model, xtrain, ytrain, cv=5, scoring='neg_mean_squared_error')\n",
    "    mean_cv_score = -cv_scores.mean()  # Negate because scoring is negative MSE\n",
    "    \n",
    "    # Training the model\n",
    "    model.fit(xtrain, ytrain)\n",
    "    \n",
    "    # Test the model\n",
    "    y_pred = model.predict(xtest)\n",
    "    \n",
    "    # Calculate evaluation metrics\n",
    "    mae = mean_absolute_error(ytest, y_pred)\n",
    "    mse = mean_squared_error(ytest, y_pred)\n",
    "    rmse = np.sqrt(mse)\n",
    "    r2 = r2_score(ytest, y_pred)\n",
    "    \n",
    "    # Print evaluation metrics\n",
    "    print(model.__class__.__name__)\n",
    "    print(f\"Cross-Validation Mean MSE: {mean_cv_score}\")\n",
    "    print(f\"Mean Absolute Error: {mae}\")\n",
    "    print(f\"Mean Squared Error: {mse}\")\n",
    "    print(f\"Root Mean Squared Error: {rmse}\")\n",
    "    print(f\"R2 Score: {r2}\")\n",
    "    print(\"\\n\")\n",
    "    \n",
    "    return mean_cv_score, mae, mse, rmse, r2\n",
    "\n",
    "# Assume xtrain, xtest, ytrain, ytest are already defined\n",
    "# Split the data (assuming X and y are your features and target variable)\n",
    "xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Define the individual models\n",
    "rf = RandomForestRegressor(random_state=42)\n",
    "xgb = XGBRegressor(random_state=42)\n",
    "gbr = GradientBoostingRegressor(random_state=42)\n",
    "\n",
    "# Create a Voting Regressor\n",
    "voting_regressor = VotingRegressor(estimators=[('rf', rf), ('xgb', xgb), ('gbr', gbr)])\n",
    "\n",
    "# Evaluate the Voting Regressor\n",
    "mean_cv_score, mae, mse, rmse, r2 = evaluate_model(voting_regressor, xtrain, ytrain, xtest, ytest)\n",
    "\n",
    "# Display the evaluation metrics\n",
    "print(\"Voting Regressor Performance:\")\n",
    "print(f\"Cross-Validation Mean MSE: {mean_cv_score}\")\n",
    "print(f\"Mean Absolute Error: {mae}\")\n",
    "print(f\"Mean Squared Error: {mse}\")\n",
    "print(f\"Root Mean Squared Error: {rmse}\")\n",
    "print(f\"R2 Score: {r2}\")\n",
    "\n",
    "# Evaluate individual models for comparison (optional)\n",
    "models = [rf, xgb, gbr]\n",
    "for model in models:\n",
    "    evaluate_model(model, xtrain, ytrain, xtest, ytest)\n",
    "\n",
    "# Final ensemble model is the Voting Regressor\n",
    "final_model = voting_regressor\n",
    "final_model.fit(xtrain, ytrain)\n",
    "y_pred_final = final_model.predict(xtest)\n",
    "\n",
    "# Calculate evaluation metrics for the final ensemble model\n",
    "final_mae = mean_absolute_error(ytest, y_pred_final)\n",
    "final_mse = mean_squared_error(ytest, y_pred_final)\n",
    "final_rmse = np.sqrt(final_mse)\n",
    "final_r2 = r2_score(ytest, y_pred_final)\n",
    "\n",
    "# Display final ensemble model metrics\n",
    "print(\"Final Ensemble Model (Voting Regressor) Performance:\")\n",
    "print(f\"Mean Absolute Error: {final_mae}\")\n",
    "print(f\"Mean Squared Error: {final_mse}\")\n",
    "print(f\"Root Mean Squared Error: {final_rmse}\")\n",
    "print(f\"R2 Score: {final_r2}\")\n",
    "\n",
    "print(y_pred_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5859f6c4-2b8d-4051-a45a-a4cca218ea2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fine tuning and evaluation\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2ede74f3-0d9f-466e-b948-3e78a7ff2aba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingRegressor(estimators=[(&#x27;rf&#x27;, RandomForestRegressor(random_state=42)),\n",
       "                            (&#x27;xgb&#x27;,\n",
       "                             XGBRegressor(base_score=None, booster=None,\n",
       "                                          callbacks=None,\n",
       "                                          colsample_bylevel=None,\n",
       "                                          colsample_bynode=None,\n",
       "                                          colsample_bytree=None, device=None,\n",
       "                                          early_stopping_rounds=None,\n",
       "                                          enable_categorical=False,\n",
       "                                          eval_metric=None, feature_types=None,\n",
       "                                          gamma=None, grow_policy=None,\n",
       "                                          importance_type=N...\n",
       "                                          interaction_constraints=None,\n",
       "                                          learning_rate=None, max_bin=None,\n",
       "                                          max_cat_threshold=None,\n",
       "                                          max_cat_to_onehot=None,\n",
       "                                          max_delta_step=None, max_depth=None,\n",
       "                                          max_leaves=None,\n",
       "                                          min_child_weight=None, missing=nan,\n",
       "                                          monotone_constraints=None,\n",
       "                                          multi_strategy=None,\n",
       "                                          n_estimators=None, n_jobs=None,\n",
       "                                          num_parallel_tree=None,\n",
       "                                          random_state=42, ...)),\n",
       "                            (&#x27;gbr&#x27;,\n",
       "                             GradientBoostingRegressor(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;rf&#x27;, RandomForestRegressor(random_state=42)),\n",
       "                            (&#x27;xgb&#x27;,\n",
       "                             XGBRegressor(base_score=None, booster=None,\n",
       "                                          callbacks=None,\n",
       "                                          colsample_bylevel=None,\n",
       "                                          colsample_bynode=None,\n",
       "                                          colsample_bytree=None, device=None,\n",
       "                                          early_stopping_rounds=None,\n",
       "                                          enable_categorical=False,\n",
       "                                          eval_metric=None, feature_types=None,\n",
       "                                          gamma=None, grow_policy=None,\n",
       "                                          importance_type=N...\n",
       "                                          interaction_constraints=None,\n",
       "                                          learning_rate=None, max_bin=None,\n",
       "                                          max_cat_threshold=None,\n",
       "                                          max_cat_to_onehot=None,\n",
       "                                          max_delta_step=None, max_depth=None,\n",
       "                                          max_leaves=None,\n",
       "                                          min_child_weight=None, missing=nan,\n",
       "                                          monotone_constraints=None,\n",
       "                                          multi_strategy=None,\n",
       "                                          n_estimators=None, n_jobs=None,\n",
       "                                          num_parallel_tree=None,\n",
       "                                          random_state=42, ...)),\n",
       "                            (&#x27;gbr&#x27;,\n",
       "                             GradientBoostingRegressor(random_state=42))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>rf</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>xgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>gbr</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "VotingRegressor(estimators=[('rf', RandomForestRegressor(random_state=42)),\n",
       "                            ('xgb',\n",
       "                             XGBRegressor(base_score=None, booster=None,\n",
       "                                          callbacks=None,\n",
       "                                          colsample_bylevel=None,\n",
       "                                          colsample_bynode=None,\n",
       "                                          colsample_bytree=None, device=None,\n",
       "                                          early_stopping_rounds=None,\n",
       "                                          enable_categorical=False,\n",
       "                                          eval_metric=None, feature_types=None,\n",
       "                                          gamma=None, grow_policy=None,\n",
       "                                          importance_type=N...\n",
       "                                          interaction_constraints=None,\n",
       "                                          learning_rate=None, max_bin=None,\n",
       "                                          max_cat_threshold=None,\n",
       "                                          max_cat_to_onehot=None,\n",
       "                                          max_delta_step=None, max_depth=None,\n",
       "                                          max_leaves=None,\n",
       "                                          min_child_weight=None, missing=nan,\n",
       "                                          monotone_constraints=None,\n",
       "                                          multi_strategy=None,\n",
       "                                          n_estimators=None, n_jobs=None,\n",
       "                                          num_parallel_tree=None,\n",
       "                                          random_state=42, ...)),\n",
       "                            ('gbr',\n",
       "                             GradientBoostingRegressor(random_state=42))])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Defining chosen model as the Voting Regressor\n",
    "initial_model = VotingRegressor(estimators=[('rf', RandomForestRegressor(random_state=42)), \n",
    "                                            ('xgb', XGBRegressor(random_state=42)), \n",
    "                                            ('gbr', GradientBoostingRegressor(random_state=42))])\n",
    "\n",
    "# Train the initial model\n",
    "initial_model.fit(xtrain, ytrain)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "cc05a6f7-7f3b-4620-a938-72ed94c1c6e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicting on the test set\n",
    "y_pred_initial = initial_model.predict(xtest)\n",
    "                                      \n",
    "# Evaluate initial model performance\n",
    "mae_initial = mean_absolute_error(ytest, y_pred_initial)\n",
    "rmse_initial = mean_squared_error(ytest, y_pred_initial, squared=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2c90e119-88b0-481a-b127-afd83199413b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Model Performance:\n",
      "Mean Absolute Error (MAE): 1.035615749657285\n",
      "Root Mean Squared Error (RMSE): 1.4353891224660986\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Initial Model Performance:\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae_initial}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse_initial}\\n\")\n",
    "\n",
    "# Fine-tuning process using GridSearchCV for parameter tuning\n",
    "param_grid = {\n",
    "    'rf__n_estimators': [50, 100, 200],\n",
    "    'rf__max_depth': [None, 10, 20],\n",
    "    'rf__min_samples_split': [2, 5, 10],\n",
    "    'rf__min_samples_leaf': [1, 2, 4],\n",
    "    'xgb__n_estimators': [50, 100, 200],\n",
    "    'xgb__max_depth': [3, 6, 9],\n",
    "    'xgb__learning_rate': [0.01, 0.1, 0.2],\n",
    "    'gbr__n_estimators': [50, 100, 200],\n",
    "    'gbr__max_depth': [3, 6, 9],\n",
    "    'gbr__learning_rate': [0.01, 0.1, 0.2]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f5586906-6772-4cee-8d52-498ae5835c70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5,\n",
       "                   estimator=VotingRegressor(estimators=[(&#x27;rf&#x27;,\n",
       "                                                          RandomForestRegressor(random_state=42)),\n",
       "                                                         (&#x27;xgb&#x27;,\n",
       "                                                          XGBRegressor(base_score=None,\n",
       "                                                                       booster=None,\n",
       "                                                                       callbacks=None,\n",
       "                                                                       colsample_bylevel=None,\n",
       "                                                                       colsample_bynode=None,\n",
       "                                                                       colsample_bytree=None,\n",
       "                                                                       device=None,\n",
       "                                                                       early_stopping_rounds=None,\n",
       "                                                                       enable_categorical=False,\n",
       "                                                                       eval_metric=None,\n",
       "                                                                       feature_types=None,\n",
       "                                                                       gamma=None,...\n",
       "                   param_distributions={&#x27;gbr__learning_rate&#x27;: [0.01, 0.1, 0.2],\n",
       "                                        &#x27;gbr__max_depth&#x27;: [3, 6, 9],\n",
       "                                        &#x27;gbr__n_estimators&#x27;: [50, 100, 200],\n",
       "                                        &#x27;rf__max_depth&#x27;: [None, 10, 20],\n",
       "                                        &#x27;rf__min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                                        &#x27;rf__min_samples_split&#x27;: [2, 5, 10],\n",
       "                                        &#x27;rf__n_estimators&#x27;: [50, 100, 200],\n",
       "                                        &#x27;xgb__learning_rate&#x27;: [0.01, 0.1, 0.2],\n",
       "                                        &#x27;xgb__max_depth&#x27;: [3, 6, 9],\n",
       "                                        &#x27;xgb__n_estimators&#x27;: [50, 100, 200]},\n",
       "                   scoring=&#x27;neg_mean_squared_error&#x27;, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5,\n",
       "                   estimator=VotingRegressor(estimators=[(&#x27;rf&#x27;,\n",
       "                                                          RandomForestRegressor(random_state=42)),\n",
       "                                                         (&#x27;xgb&#x27;,\n",
       "                                                          XGBRegressor(base_score=None,\n",
       "                                                                       booster=None,\n",
       "                                                                       callbacks=None,\n",
       "                                                                       colsample_bylevel=None,\n",
       "                                                                       colsample_bynode=None,\n",
       "                                                                       colsample_bytree=None,\n",
       "                                                                       device=None,\n",
       "                                                                       early_stopping_rounds=None,\n",
       "                                                                       enable_categorical=False,\n",
       "                                                                       eval_metric=None,\n",
       "                                                                       feature_types=None,\n",
       "                                                                       gamma=None,...\n",
       "                   param_distributions={&#x27;gbr__learning_rate&#x27;: [0.01, 0.1, 0.2],\n",
       "                                        &#x27;gbr__max_depth&#x27;: [3, 6, 9],\n",
       "                                        &#x27;gbr__n_estimators&#x27;: [50, 100, 200],\n",
       "                                        &#x27;rf__max_depth&#x27;: [None, 10, 20],\n",
       "                                        &#x27;rf__min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                                        &#x27;rf__min_samples_split&#x27;: [2, 5, 10],\n",
       "                                        &#x27;rf__n_estimators&#x27;: [50, 100, 200],\n",
       "                                        &#x27;xgb__learning_rate&#x27;: [0.01, 0.1, 0.2],\n",
       "                                        &#x27;xgb__max_depth&#x27;: [3, 6, 9],\n",
       "                                        &#x27;xgb__n_estimators&#x27;: [50, 100, 200]},\n",
       "                   scoring=&#x27;neg_mean_squared_error&#x27;, verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;rf&#x27;, RandomForestRegressor(random_state=42)),\n",
       "                            (&#x27;xgb&#x27;,\n",
       "                             XGBRegressor(base_score=None, booster=None,\n",
       "                                          callbacks=None,\n",
       "                                          colsample_bylevel=None,\n",
       "                                          colsample_bynode=None,\n",
       "                                          colsample_bytree=None, device=None,\n",
       "                                          early_stopping_rounds=None,\n",
       "                                          enable_categorical=False,\n",
       "                                          eval_metric=None, feature_types=None,\n",
       "                                          gamma=None, grow_policy=None,\n",
       "                                          importance_type=N...\n",
       "                                          interaction_constraints=None,\n",
       "                                          learning_rate=None, max_bin=None,\n",
       "                                          max_cat_threshold=None,\n",
       "                                          max_cat_to_onehot=None,\n",
       "                                          max_delta_step=None, max_depth=None,\n",
       "                                          max_leaves=None,\n",
       "                                          min_child_weight=None, missing=nan,\n",
       "                                          monotone_constraints=None,\n",
       "                                          multi_strategy=None,\n",
       "                                          n_estimators=None, n_jobs=None,\n",
       "                                          num_parallel_tree=None,\n",
       "                                          random_state=42, ...)),\n",
       "                            (&#x27;gbr&#x27;,\n",
       "                             GradientBoostingRegressor(random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>rf</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>xgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>gbr</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomizedSearchCV(cv=5,\n",
       "                   estimator=VotingRegressor(estimators=[('rf',\n",
       "                                                          RandomForestRegressor(random_state=42)),\n",
       "                                                         ('xgb',\n",
       "                                                          XGBRegressor(base_score=None,\n",
       "                                                                       booster=None,\n",
       "                                                                       callbacks=None,\n",
       "                                                                       colsample_bylevel=None,\n",
       "                                                                       colsample_bynode=None,\n",
       "                                                                       colsample_bytree=None,\n",
       "                                                                       device=None,\n",
       "                                                                       early_stopping_rounds=None,\n",
       "                                                                       enable_categorical=False,\n",
       "                                                                       eval_metric=None,\n",
       "                                                                       feature_types=None,\n",
       "                                                                       gamma=None,...\n",
       "                   param_distributions={'gbr__learning_rate': [0.01, 0.1, 0.2],\n",
       "                                        'gbr__max_depth': [3, 6, 9],\n",
       "                                        'gbr__n_estimators': [50, 100, 200],\n",
       "                                        'rf__max_depth': [None, 10, 20],\n",
       "                                        'rf__min_samples_leaf': [1, 2, 4],\n",
       "                                        'rf__min_samples_split': [2, 5, 10],\n",
       "                                        'rf__n_estimators': [50, 100, 200],\n",
       "                                        'xgb__learning_rate': [0.01, 0.1, 0.2],\n",
       "                                        'xgb__max_depth': [3, 6, 9],\n",
       "                                        'xgb__n_estimators': [50, 100, 200]},\n",
       "                   scoring='neg_mean_squared_error', verbose=2)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search = RandomizedSearchCV(initial_model, param_grid, \n",
    "                           cv=5, scoring='neg_mean_squared_error', verbose=2, n_jobs=-1)\n",
    "grid_search.fit(xtrain, ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6b0037e0-7df6-40c3-94b2-f79c520c9e4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'xgb__n_estimators': 50, 'xgb__max_depth': 6, 'xgb__learning_rate': 0.1, 'rf__n_estimators': 100, 'rf__min_samples_split': 5, 'rf__min_samples_leaf': 1, 'rf__max_depth': 20, 'gbr__n_estimators': 50, 'gbr__max_depth': 9, 'gbr__learning_rate': 0.2}\n"
     ]
    }
   ],
   "source": [
    "# Best parameters found by GridSearchinggg\n",
    "best_params = grid_search.best_params_\n",
    "print(\"Best Parameters:\", best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "43150352-323a-40ee-9933-337f0ea0bd7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingRegressor(estimators=[(&#x27;rf&#x27;,\n",
       "                             RandomForestRegressor(max_depth=20,\n",
       "                                                   min_samples_split=5,\n",
       "                                                   random_state=42)),\n",
       "                            (&#x27;xgb&#x27;,\n",
       "                             XGBRegressor(base_score=None, booster=None,\n",
       "                                          callbacks=None,\n",
       "                                          colsample_bylevel=None,\n",
       "                                          colsample_bynode=None,\n",
       "                                          colsample_bytree=None, device=None,\n",
       "                                          early_stopping_rounds=None,\n",
       "                                          enable_categorical=False,\n",
       "                                          eval_metric=None, feature_types=None,\n",
       "                                          gamma=None, g...\n",
       "                                          learning_rate=0.1, max_bin=None,\n",
       "                                          max_cat_threshold=None,\n",
       "                                          max_cat_to_onehot=None,\n",
       "                                          max_delta_step=None, max_depth=6,\n",
       "                                          max_leaves=None,\n",
       "                                          min_child_weight=None, missing=nan,\n",
       "                                          monotone_constraints=None,\n",
       "                                          multi_strategy=None, n_estimators=50,\n",
       "                                          n_jobs=None, num_parallel_tree=None,\n",
       "                                          random_state=42, ...)),\n",
       "                            (&#x27;gbr&#x27;,\n",
       "                             GradientBoostingRegressor(learning_rate=0.2,\n",
       "                                                       max_depth=9,\n",
       "                                                       n_estimators=50,\n",
       "                                                       random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;rf&#x27;,\n",
       "                             RandomForestRegressor(max_depth=20,\n",
       "                                                   min_samples_split=5,\n",
       "                                                   random_state=42)),\n",
       "                            (&#x27;xgb&#x27;,\n",
       "                             XGBRegressor(base_score=None, booster=None,\n",
       "                                          callbacks=None,\n",
       "                                          colsample_bylevel=None,\n",
       "                                          colsample_bynode=None,\n",
       "                                          colsample_bytree=None, device=None,\n",
       "                                          early_stopping_rounds=None,\n",
       "                                          enable_categorical=False,\n",
       "                                          eval_metric=None, feature_types=None,\n",
       "                                          gamma=None, g...\n",
       "                                          learning_rate=0.1, max_bin=None,\n",
       "                                          max_cat_threshold=None,\n",
       "                                          max_cat_to_onehot=None,\n",
       "                                          max_delta_step=None, max_depth=6,\n",
       "                                          max_leaves=None,\n",
       "                                          min_child_weight=None, missing=nan,\n",
       "                                          monotone_constraints=None,\n",
       "                                          multi_strategy=None, n_estimators=50,\n",
       "                                          n_jobs=None, num_parallel_tree=None,\n",
       "                                          random_state=42, ...)),\n",
       "                            (&#x27;gbr&#x27;,\n",
       "                             GradientBoostingRegressor(learning_rate=0.2,\n",
       "                                                       max_depth=9,\n",
       "                                                       n_estimators=50,\n",
       "                                                       random_state=42))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>rf</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=20, min_samples_split=5, random_state=42)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>xgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=6, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=50, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>gbr</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(learning_rate=0.2, max_depth=9, n_estimators=50,\n",
       "                          random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "VotingRegressor(estimators=[('rf',\n",
       "                             RandomForestRegressor(max_depth=20,\n",
       "                                                   min_samples_split=5,\n",
       "                                                   random_state=42)),\n",
       "                            ('xgb',\n",
       "                             XGBRegressor(base_score=None, booster=None,\n",
       "                                          callbacks=None,\n",
       "                                          colsample_bylevel=None,\n",
       "                                          colsample_bynode=None,\n",
       "                                          colsample_bytree=None, device=None,\n",
       "                                          early_stopping_rounds=None,\n",
       "                                          enable_categorical=False,\n",
       "                                          eval_metric=None, feature_types=None,\n",
       "                                          gamma=None, g...\n",
       "                                          learning_rate=0.1, max_bin=None,\n",
       "                                          max_cat_threshold=None,\n",
       "                                          max_cat_to_onehot=None,\n",
       "                                          max_delta_step=None, max_depth=6,\n",
       "                                          max_leaves=None,\n",
       "                                          min_child_weight=None, missing=nan,\n",
       "                                          monotone_constraints=None,\n",
       "                                          multi_strategy=None, n_estimators=50,\n",
       "                                          n_jobs=None, num_parallel_tree=None,\n",
       "                                          random_state=42, ...)),\n",
       "                            ('gbr',\n",
       "                             GradientBoostingRegressor(learning_rate=0.2,\n",
       "                                                       max_depth=9,\n",
       "                                                       n_estimators=50,\n",
       "                                                       random_state=42))])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select the best model from grid search\n",
    "best_model = grid_search.best_estimator_\n",
    "\n",
    "# Train the best model on the full training set\n",
    "best_model.fit(xtrain, ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b2f343d4-6687-44a3-b6f7-e14eebb39b9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Model Performance after Fine-Tuning:\n",
      "Mean Absolute Error (MAE): 0.9825801936640493\n",
      "Root Mean Squared Error (RMSE): 1.3932970477529185\n"
     ]
    }
   ],
   "source": [
    "# Predict on the test set with the best model\n",
    "y_pred_best = best_model.predict(xtest)\n",
    "\n",
    "# Evaluate best model performance\n",
    "mae_best = mean_absolute_error(ytest, y_pred_best)\n",
    "rmse_best = mean_squared_error(ytest, y_pred_best, squared=False)\n",
    "\n",
    "print(\"\\nFinal Model Performance after Fine-Tuning:\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae_best}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse_best}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "57d4f975-41cf-4135-87e0-33b1a3dc92ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Applying the same preprocessing to the players_22 dataset\n",
    "players_22_selected = players_22[top_features]\n",
    "\n",
    "# Scale the selected features\n",
    "players_22_scaled = scaler.transform(players_22_selected)\n",
    "players_22_prepared = pd.DataFrame(players_22_scaled, columns=top_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d3dc6b80-ac74-4853-a335-109c114fa318",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Performance on players_22 Dataset:\n",
      "Mean Absolute Error (MAE): 0.9039087816805413\n",
      "Mean Squared Error (MSE): 1.6007190688084139\n",
      "Root Mean Squared Error (RMSE): 1.2651952690428516\n",
      "R2 Score: 0.9661832716005718\n"
     ]
    }
   ],
   "source": [
    "#making predictions on the players_22 dataset using the model I chose\n",
    "y_pred_players_22 = best_model.predict(players_22_prepared)\n",
    "\n",
    "y_players_22 = players_22['overall']\n",
    "# Evaluate the model performance on the players_22 dataset\n",
    "mae_players_22 = mean_absolute_error(y_players_22, y_pred_players_22)\n",
    "mse_players_22 = mean_squared_error(y_players_22, y_pred_players_22)\n",
    "rmse_players_22 = np.sqrt(mse_players_22)\n",
    "r2_players_22 = r2_score(y_players_22, y_pred_players_22)\n",
    "\n",
    "print(\"\\nModel Performance on players_22 Dataset:\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae_players_22}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse_players_22}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse_players_22}\")\n",
    "print(f\"R2 Score: {r2_players_22}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "34c57c71-2494-4996-ba81-4204c73fc98b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['scaler.pkl']"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "joblib.dump(best_model, \"model.pkl\")\n",
    "joblib.dump(scaler, \"scaler.pkl\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "28657c13-5785-4d64-8bbb-6465a37fed48",
   "metadata": {},
   "outputs": [],
   "source": [
    "import joblib\n",
    "\n",
    "loaded_model = joblib.load(\"model.pkl\")\n",
    "loaded_scaler = joblib.load(\"scaler.pkl\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "95eaf880-2732-4f3f-adc4-bebadac7975e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "scikit-learn version: 1.2.2\n",
      "xgboost version: 2.0.3\n"
     ]
    }
   ],
   "source": [
    "import sklearn\n",
    "import xgboost\n",
    "\n",
    "print(f\"scikit-learn version: {sklearn.__version__}\")\n",
    "print(f\"xgboost version: {xgboost.__version__}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "301facbf-dad2-4426-a295-2a0491458413",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in c:\\users\\user\\anaconda3\\lib\\site-packages (1.30.0)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (5.0.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (1.6.2)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (4.2.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (8.1.7)\n",
      "Requirement already satisfied: importlib-metadata<8,>=1.4 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (7.0.1)\n",
      "Requirement already satisfied: numpy<2,>=1.19.3 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (1.26.4)\n",
      "Requirement already satisfied: packaging<24,>=16.8 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (23.1)\n",
      "Requirement already satisfied: pandas<3,>=1.3.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (2.1.4)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (10.2.0)\n",
      "Requirement already satisfied: protobuf<5,>=3.20 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (3.20.3)\n",
      "Requirement already satisfied: pyarrow>=6.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (14.0.2)\n",
      "Requirement already satisfied: python-dateutil<3,>=2.7.3 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (2.8.2)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (2.31.0)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (13.3.5)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (8.2.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (4.9.0)\n",
      "Requirement already satisfied: tzlocal<6,>=1.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (2.1)\n",
      "Requirement already satisfied: validators<1,>=0.2 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (0.18.2)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (3.1.37)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (0.8.0)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (6.3.3)\n",
      "Requirement already satisfied: watchdog>=2.1.5 in c:\\users\\user\\anaconda3\\lib\\site-packages (from streamlit) (2.1.6)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\user\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.3)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.19.2)\n",
      "Requirement already satisfied: toolz in c:\\users\\user\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\user\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\user\\anaconda3\\lib\\site-packages (from importlib-metadata<8,>=1.4->streamlit) (3.17.0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\user\\anaconda3\\lib\\site-packages (from python-dateutil<3,>=2.7.3->streamlit) (1.16.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\user\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\user\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\user\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2024.2.2)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Requirement already satisfied: decorator>=3.4.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from validators<1,>=0.2->streamlit) (5.1.1)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\user\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.1.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\user\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\user\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.6)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from markdown-it-py<3.0.0,>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "126c2469-b861-4529-8b18-a2b1382e6a49",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
